@import url(https://fonts.googleapis.com/css?family=Roboto);/*! normalize.css v6.0.0 | MIT License | github.com/necolas/normalize.css */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in
 *    IE on Windows Phone and in iOS.
 */
html{
    line-height: 1.15;
    /* 1 */
    -ms-text-size-adjust: 100%;
    /* 2 */
    -webkit-text-size-adjust: 100%;
    /* 2 */
}
/* Sections
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
article, aside, footer, header, nav, section{
    display: block;
}
/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1{
    font-size: 2em;
    margin: 0.67em 0;
}
/* Grouping content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 * 1. Add the correct display in IE.
 */
figcaption, figure, main{
    /* 1 */
    display: block;
}
/**
 * Add the correct margin in IE 8.
 */
figure{
    margin: 1em 40px;
}
/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr{
    box-sizing: content-box;
    /* 1 */
    height: 0;
    /* 1 */
    overflow: visible;
    /* 2 */
}
/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre{
    font-family: monospace, monospace;
    /* 1 */
    font-size: 1em;
    /* 2 */
}
/* Text-level semantics
   ========================================================================== */
/**
 * 1. Remove the gray background on active links in IE 10.
 * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
 */
a{
    background-color: transparent;
    /* 1 */
    -webkit-text-decoration-skip: objects;
    /* 2 */
}
/**
 * 1. Remove the bottom border in Chrome 57- and Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title]{
    border-bottom: none;
    /* 1 */
    text-decoration: underline;
    /* 2 */
    text-decoration: underline dotted;
    /* 2 */
}
/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */
b, strong{
    font-weight: inherit;
}
/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b, strong{
    font-weight: bolder;
}
/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code, kbd, samp{
    font-family: monospace, monospace;
    /* 1 */
    font-size: 1em;
    /* 2 */
}
/**
 * Add the correct font style in Android 4.3-.
 */
dfn{
    font-style: italic;
}
/**
 * Add the correct background and color in IE 9-.
 */
mark{
    background-color: #ff0;
    color: #000;
}
/**
 * Add the correct font size in all browsers.
 */
small{
    font-size: 80%;
}
/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub, sup{
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
}
sub{
    bottom: -0.25em;
}
sup{
    top: -0.5em;
}
/* Embedded content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
audio, video{
    display: inline-block;
}
/**
 * Add the correct display in iOS 4-7.
 */
audio:not([controls]){
    display: none;
    height: 0;
}
/**
 * Remove the border on images inside links in IE 10-.
 */
img{
    border-style: none;
}
/**
 * Hide the overflow in IE.
 */
svg:not(:root){
    overflow: hidden;
}
/* Forms
   ========================================================================== */
/**
 * Remove the margin in Firefox and Safari.
 */
button, input, optgroup, select, textarea{
    margin: 0;
}
/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button, input{
    /* 1 */
    overflow: visible;
}
/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button, select{
    /* 1 */
    text-transform: none;
}
/**
 * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS and Safari.
 */
button, html [type="button"], [type="reset"], [type="submit"]{
    -webkit-appearance: button;
    /* 2 */
}
/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner, [type="button"]::-moz-focus-inner, [type="reset"]::-moz-focus-inner, [type="submit"]::-moz-focus-inner{
    border-style: none;
    padding: 0;
}
/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring, [type="button"]:-moz-focusring, [type="reset"]:-moz-focusring, [type="submit"]:-moz-focusring{
    outline: 1px dotted ButtonText;
}
/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend{
    box-sizing: border-box;
    /* 1 */
    color: inherit;
    /* 2 */
    display: table;
    /* 1 */
    max-width: 100%;
    /* 1 */
    padding: 0;
    /* 3 */
    white-space: normal;
    /* 1 */
}
/**
 * 1. Add the correct display in IE 9-.
 * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress{
    display: inline-block;
    /* 1 */
    vertical-align: baseline;
    /* 2 */
}
/**
 * Remove the default vertical scrollbar in IE.
 */
textarea{
    overflow: auto;
}
/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */
[type="checkbox"], [type="radio"]{
    box-sizing: border-box;
    /* 1 */
    padding: 0;
    /* 2 */
}
/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button, [type="number"]::-webkit-outer-spin-button{
    height: auto;
}
/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"]{
    -webkit-appearance: textfield;
    /* 1 */
    outline-offset: -2px;
    /* 2 */
}
/**
 * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
 */
[type="search"]::-webkit-search-cancel-button, [type="search"]::-webkit-search-decoration{
    -webkit-appearance: none;
}
/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button{
    -webkit-appearance: button;
    /* 1 */
    font: inherit;
    /* 2 */
}
/* Interactive
   ========================================================================== */
/*
 * Add the correct display in IE 9-.
 * 1. Add the correct display in Edge, IE, and Firefox.
 */
details, menu{
    display: block;
}
/*
 * Add the correct display in all browsers.
 */
summary{
    display: list-item;
}
/* Scripting
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
canvas{
    display: inline-block;
}
/**
 * Add the correct display in IE.
 */
template{
    display: none;
}
/* Hidden
   ========================================================================== */
/**
 * Add the correct display in IE 10-.
 */
[hidden]{
    display: none;
}
/*!
 Material Components for the web
 Copyright (c) 2017 Google Inc.
 License: Apache-2.0
*/
/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct css rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-rule(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
/**
 * Applies the correct css rules needed to have an element transition between elevations.
 * This mixin should be applied to elements whose elevation values will change depending on their
 * context (e.g. when active or disabled).
 */
/*
  Precomputed linear color channel values, for use in contrast calculations.
  See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests

  Algorithm, for c in 0 to 255:
  f(c) {
    c = c / 255;
    return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
  }

  This lookup table is needed since there is no `pow` in SASS.
*/
/**
 * Calculate the luminance for a color.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Calculate the contrast ratio between two colors.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Determine whether to use dark or light text on top of given color.
 * Returns "dark" for dark text and "light" for light text.
 */
/*
  Main theme colors.
  If you're a user customizing your color scheme in SASS, these are probably the only variables you need to change.
*/
/* Indigo 500 */
/* Pink A200 */
/* White */
/* Which set of text colors to use for each main theme color (light or dark) */
/* Text colors according to light vs dark and text type */
/* Primary text colors for each of the theme colors */
/**
 * Applies the correct theme color style to the specified property.
 * $property is typically color or background-color, but can be any CSS property that accepts color values.
 * $style should be one of the map keys in $mdc-theme-property-values (_variables.scss).
 */
/**
 * Creates a rule to be used in MDC-Web components for dark theming, and applies the provided contents.
 * Should provide the $root-selector option if applied to anything other than the root selector.
 * When used with a modifier class, provide a second argument of `true` for the $compound parameter
 * to specify that this should be attached as a compound class.
 *
 * Usage example:
 *
 * ```scss
 * .mdc-foo {
 *   color: black;
 *
 *   @include mdc-theme-dark {
 *     color: white;
 *   }
 *
 *   &__bar {
 *     background: black;
 *
 *     @include mdc-theme-dark(".mdc-foo") {
 *       background: white;
 *     }
 *   }
 * }
 *
 * .mdc-foo--disabled {
 *   opacity: .38;
 *
 *   @include mdc-theme-dark(".mdc-foo", true) {
 *     opacity: .5;
 *   }
 * }
 * ```
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
.mdc-card{
    box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, .2), 0px 2px 2px 0px rgba(0, 0, 0, .14), 0px 1px 5px 0px rgba(0, 0, 0, .12);
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
    -ms-flex-direction: column;
    flex-direction: column;
    -webkit-box-pack: end;
    -ms-flex-pack: end;
    justify-content: flex-end;
    padding: 0;
    box-sizing: border-box;
}
.mdc-card__primary{
    padding: 16px;
}
.mdc-card__primary .mdc-card__title--large{
    padding-top: 8px;
}
.mdc-card__primary:last-child{
    padding-bottom: 24px;
}
.mdc-card__supporting-text{
    padding: 8px 16px;
    box-sizing: border-box;
    font-family: Roboto, sans-serif;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-size: 0.875rem;
    font-weight: 400;
    letter-spacing: 0.04em;
    line-height: 1.25rem;
    color: rgba(0, 0, 0, .87);
    color: rgba(0, 0, 0, .87);
}
.mdc-card--theme-dark .mdc-card__supporting-text, .mdc-theme--dark .mdc-card__supporting-text{
    color: white;
    color: white;
}
.mdc-card__primary + .mdc-card__supporting-text{
    margin-top: -8px;
    padding-top: 0;
}
.mdc-card__supporting-text:last-child{
    padding-bottom: 24px;
}
.mdc-card__actions{
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    padding: 8px;
    box-sizing: border-box;
}
.mdc-card--theme-dark .mdc-card__actions, .mdc-theme--dark .mdc-card__actions{
    color: white;
    color: white;
}
.mdc-card__actions .mdc-card__action{
    margin: 0 8px 0 0;
}
.mdc-card__actions .mdc-card__action:last-child{
    margin-right: 0;
}
.mdc-card__actions--vertical{
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
    -ms-flex-flow: column;
    flex-flow: column;
    -webkit-box-align: start;
    -ms-flex-align: start;
    align-items: flex-start;
}
.mdc-card__actions--vertical .mdc-card__action{
    margin: 0 0 4px;
}
.mdc-card__actions--vertical .mdc-card__action:last-child{
    margin-bottom: 0;
}
.mdc-card__media{
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
    -ms-flex-direction: column;
    flex-direction: column;
    -webkit-box-pack: end;
    -ms-flex-pack: end;
    justify-content: flex-end;
    padding: 16px;
    box-sizing: border-box;
}
.mdc-card__media-item{
    display: inline-block;
    width: auto;
    height: 80px;
    margin: 16px 0 0;
    padding: 0;
}
.mdc-card__media-item--1dot5x{
    width: auto;
    height: 120px;
}
.mdc-card__media-item--2x{
    width: auto;
    height: 160px;
}
.mdc-card__media-item--3x{
    width: auto;
    height: 240px;
}
.mdc-card__title{
    font-family: Roboto, sans-serif;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-size: 0.875rem;
    font-weight: 500;
    letter-spacing: 0.04em;
    line-height: 1.5rem;
    color: rgba(0, 0, 0, .87);
    color: rgba(0, 0, 0, .87);
    margin: -.063rem 0;
}
.mdc-card--theme-dark .mdc-card__title, .mdc-theme--dark .mdc-card__title{
    color: white;
    color: white;
}
.mdc-card__title--large{
    font-family: Roboto, sans-serif;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-size: 1.5rem;
    font-weight: 400;
    letter-spacing: normal;
    line-height: 2rem;
    margin: 0;
}
.mdc-card__subtitle{
    font-family: Roboto, sans-serif;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-size: 0.875rem;
    font-weight: 400;
    letter-spacing: 0.04em;
    line-height: 1.25rem;
    color: rgba(0, 0, 0, .87);
    color: rgba(0, 0, 0, .87);
    margin: -.063rem 0;
}
.mdc-card--theme-dark .mdc-card__subtitle, .mdc-theme--dark .mdc-card__subtitle{
    color: white;
    color: white;
}
.mdc-card__horizontal-block{
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    -ms-flex-direction: row;
    flex-direction: row;
    -webkit-box-align: start;
    -ms-flex-align: start;
    align-items: flex-start;
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
    justify-content: space-between;
    padding: 0 16px 0 0;
    box-sizing: border-box;
}
.mdc-card__horizontal-block .mdc-card__actions--vertical{
    margin: 16px;
}
.mdc-card__horizontal-block .mdc-card__media-item{
    margin-left: 16px;
}
.mdc-card__horizontal-block .mdc-card__media-item--3x{
    margin-bottom: 16px;
}
/*!
 Material Components for the web
 Copyright (c) 2017 Google Inc.
 License: Apache-2.0
*/
/**
 * Creates a rule that will be applied when an MDC-Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box-property(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/*
  Precomputed linear color channel values, for use in contrast calculations.
  See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests

  Algorithm, for c in 0 to 255:
  f(c) {
    c = c / 255;
    return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
  }

  This lookup table is needed since there is no `pow` in SASS.
*/
/**
 * Calculate the luminance for a color.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Calculate the contrast ratio between two colors.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Determine whether to use dark or light text on top of given color.
 * Returns "dark" for dark text and "light" for light text.
 */
/*
  Main theme colors.
  If you're a user customizing your color scheme in SASS, these are probably the only variables you need to change.
*/
/* Indigo 500 */
/* Pink A200 */
/* White */
/* Which set of text colors to use for each main theme color (light or dark) */
/* Text colors according to light vs dark and text type */
/* Primary text colors for each of the theme colors */
/*
  Precomputed linear color channel values, for use in contrast calculations.
  See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests

  Algorithm, for c in 0 to 255:
  f(c) {
    c = c / 255;
    return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
  }

  This lookup table is needed since there is no `pow` in SASS.
*/
/**
 * Calculate the luminance for a color.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Calculate the contrast ratio between two colors.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Determine whether to use dark or light text on top of given color.
 * Returns "dark" for dark text and "light" for light text.
 */
/*
  Main theme colors.
  If you're a user customizing your color scheme in SASS, these are probably the only variables you need to change.
*/
/* Indigo 500 */
/* Pink A200 */
/* White */
/* Which set of text colors to use for each main theme color (light or dark) */
/* Text colors according to light vs dark and text type */
/* Primary text colors for each of the theme colors */
/**
 * Applies the correct theme color style to the specified property.
 * $property is typically color or background-color, but can be any CSS property that accepts color values.
 * $style should be one of the map keys in $mdc-theme-property-values (_variables.scss).
 */
/**
 * Creates a rule to be used in MDC-Web components for dark theming, and applies the provided contents.
 * Should provide the $root-selector option if applied to anything other than the root selector.
 * When used with a modifier class, provide a second argument of `true` for the $compound parameter
 * to specify that this should be attached as a compound class.
 *
 * Usage example:
 *
 * ```scss
 * .mdc-foo {
 *   color: black;
 *
 *   @include mdc-theme-dark {
 *     color: white;
 *   }
 *
 *   &__bar {
 *     background: black;
 *
 *     @include mdc-theme-dark(".mdc-foo") {
 *       background: white;
 *     }
 *   }
 * }
 *
 * .mdc-foo--disabled {
 *   opacity: .38;
 *
 *   @include mdc-theme-dark(".mdc-foo", true) {
 *     opacity: .5;
 *   }
 * }
 * ```
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
.mdc-textfield{
    font-family: Roboto, sans-serif;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-size: 1rem;
    letter-spacing: 0.04em;
    display: inline-block;
    margin-bottom: 8px;
    will-change: opacity, transform, color;
}
.mdc-textfield__input{
    color: rgba(0, 0, 0, .87);
    color: rgba(0, 0, 0, .87);
    padding: 0 0 8px;
    border: none;
    background: none;
    font-size: inherit;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
}
.mdc-textfield__input::-webkit-input-placeholder{
    color: rgba(0, 0, 0, .38);
    color: rgba(0, 0, 0, .38);
    transition: color 180ms cubic-bezier(0.4, 0, 0.2, 1);
    opacity: 1;
}
.mdc-textfield__input:-ms-input-placeholder{
    color: rgba(0, 0, 0, .38);
    color: rgba(0, 0, 0, .38);
    transition: color 180ms cubic-bezier(0.4, 0, 0.2, 1);
    opacity: 1;
}
.mdc-textfield__input::placeholder{
    color: rgba(0, 0, 0, .38);
    color: rgba(0, 0, 0, .38);
    transition: color 180ms cubic-bezier(0.4, 0, 0.2, 1);
    opacity: 1;
}
.mdc-textfield__input:focus{
    outline: none;
}
.mdc-textfield__input:focus::-webkit-input-placeholder{
    color: rgba(0, 0, 0, .54);
    color: rgba(0, 0, 0, .54);
}
.mdc-textfield__input:focus:-ms-input-placeholder{
    color: rgba(0, 0, 0, .54);
    color: rgba(0, 0, 0, .54);
}
.mdc-textfield__input:focus::placeholder{
    color: rgba(0, 0, 0, .54);
    color: rgba(0, 0, 0, .54);
}
.mdc-textfield__input:invalid{
    box-shadow: none;
}
.mdc-textfield__input--theme-dark, .mdc-theme--dark .mdc-textfield__input{
    color: white;
}
.mdc-textfield__input--theme-dark::-webkit-input-placeholder, .mdc-theme--dark .mdc-textfield__input::-webkit-input-placeholder{
    color: rgba(255, 255, 255, .5);
    color: rgba(255, 255, 255, .5);
}
.mdc-textfield__input--theme-dark:-ms-input-placeholder, .mdc-theme--dark .mdc-textfield__input:-ms-input-placeholder{
    color: rgba(255, 255, 255, .5);
    color: rgba(255, 255, 255, .5);
}
.mdc-textfield__input--theme-dark::placeholder, .mdc-theme--dark .mdc-textfield__input::placeholder{
    color: rgba(255, 255, 255, .5);
    color: rgba(255, 255, 255, .5);
}
.mdc-textfield__input--theme-dark:focus::-webkit-input-placeholder, .mdc-theme--dark .mdc-textfield__input:focus::-webkit-input-placeholder{
    color: rgba(255, 255, 255, .7);
    color: rgba(255, 255, 255, .7);
}
.mdc-textfield__input--theme-dark:focus:-ms-input-placeholder, .mdc-theme--dark .mdc-textfield__input:focus:-ms-input-placeholder{
    color: rgba(255, 255, 255, .7);
    color: rgba(255, 255, 255, .7);
}
.mdc-textfield__input--theme-dark:focus::placeholder, .mdc-theme--dark .mdc-textfield__input:focus::placeholder{
    color: rgba(255, 255, 255, .7);
    color: rgba(255, 255, 255, .7);
}
.mdc-textfield__label{
    color: rgba(0, 0, 0, .38);
    color: rgba(0, 0, 0, .38);
    position: absolute;
    bottom: 8px;
    left: 0;
    -webkit-transform-origin: left top;
    transform-origin: left top;
    transition: color 180ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 180ms cubic-bezier(0.4, 0, 0.2, 1);
    transition: transform 180ms cubic-bezier(0.4, 0, 0.2, 1), color 180ms cubic-bezier(0.4, 0, 0.2, 1);
    transition: transform 180ms cubic-bezier(0.4, 0, 0.2, 1), color 180ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 180ms cubic-bezier(0.4, 0, 0.2, 1);
    cursor: text;
}
[dir="rtl"] .mdc-textfield .mdc-textfield__label, .mdc-textfield[dir="rtl"] .mdc-textfield__label{
    right: 0;
    left: auto;
    -webkit-transform-origin: right top;
    transform-origin: right top;
}
.mdc-textfield--theme-dark .mdc-textfield__label, .mdc-theme--dark .mdc-textfield__label{
    color: rgba(255, 255, 255, .5);
    color: rgba(255, 255, 255, .5);
}
.mdc-textfield__label--float-above{
    -webkit-transform: translateY(-100%) scale(0.75, 0.75);
    transform: translateY(-100%) scale(0.75, 0.75);
    cursor: auto;
}
.mdc-textfield__input:-webkit-autofill + .mdc-textfield__label{
    -webkit-transform: translateY(-100%) scale(0.75, 0.75);
    transform: translateY(-100%) scale(0.75, 0.75);
    cursor: auto;
}
.mdc-textfield--upgraded:not(.mdc-textfield--fullwidth){
    display: -webkit-inline-box;
    display: -ms-inline-flexbox;
    display: inline-flex;
    position: relative;
    box-sizing: border-box;
    -webkit-box-align: end;
    -ms-flex-align: end;
    align-items: flex-end;
    margin-top: 16px;
}
.mdc-textfield--upgraded:not(.mdc-textfield--fullwidth):not(.mdc-textfield--multiline){
    height: 48px;
}
.mdc-textfield--upgraded:not(.mdc-textfield--fullwidth):not(.mdc-textfield--multiline)::after{
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 1px;
    -webkit-transform: translateY(50%) scaleY(1);
    transform: translateY(50%) scaleY(1);
    -webkit-transform-origin: center bottom;
    transform-origin: center bottom;
    transition: background-color 180ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 180ms cubic-bezier(0.4, 0, 0.2, 1);
    transition: background-color 180ms cubic-bezier(0.4, 0, 0.2, 1), transform 180ms cubic-bezier(0.4, 0, 0.2, 1);
    transition: background-color 180ms cubic-bezier(0.4, 0, 0.2, 1), transform 180ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 180ms cubic-bezier(0.4, 0, 0.2, 1);
    background-color: rgba(0, 0, 0, .12);
    content: "";
}
.mdc-textfield--theme-dark .mdc-textfield--upgraded:not(.mdc-textfield--fullwidth):not(.mdc-textfield--multiline)::after, .mdc-theme--dark .mdc-textfield--upgraded:not(.mdc-textfield--fullwidth):not(.mdc-textfield--multiline)::after{
    background-color: rgba(255, 255, 255, .12);
}
.mdc-textfield--upgraded:not(.mdc-textfield--fullwidth) .mdc-textfield__label{
    pointer-events: none;
}
.mdc-textfield--focused.mdc-textfield--upgraded:not(.mdc-textfield--fullwidth):not(.mdc-textfield--multiline)::after{
    background-color: #3f51b5;
    background-color: #3f51b5;
    -webkit-transform: translateY(100%) scaleY(2);
    transform: translateY(100%) scaleY(2);
    transition: -webkit-transform 180ms cubic-bezier(0.4, 0, 0.2, 1);
    transition: transform 180ms cubic-bezier(0.4, 0, 0.2, 1);
    transition: transform 180ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 180ms cubic-bezier(0.4, 0, 0.2, 1);
}
.mdc-textfield--theme-dark.mdc-textfield--focused.mdc-textfield--upgraded:not(.mdc-textfield--fullwidth):not(.mdc-textfield--multiline)::after, .mdc-theme--dark .mdc-textfield--focused.mdc-textfield--upgraded:not(.mdc-textfield--fullwidth):not(.mdc-textfield--multiline)::after{
    background-color: #3f51b5;
    background-color: #3f51b5;
    -webkit-transform: translateY(100%) scaleY(2);
    transform: translateY(100%) scaleY(2);
    transition: -webkit-transform 180ms cubic-bezier(0.4, 0, 0.2, 1);
    transition: transform 180ms cubic-bezier(0.4, 0, 0.2, 1);
    transition: transform 180ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 180ms cubic-bezier(0.4, 0, 0.2, 1);
}
.mdc-textfield--focused .mdc-textfield__label{
    color: #3f51b5;
    color: #3f51b5;
}
.mdc-textfield--theme-dark .mdc-textfield--focused .mdc-textfield__label, .mdc-theme--dark .mdc-textfield--focused .mdc-textfield__label{
    color: #3f51b5;
    color: #3f51b5;
}
.mdc-textfield--dense{
    margin-top: 12px;
    margin-bottom: 4px;
    font-size: .813rem;
}
.mdc-textfield--dense .mdc-textfield__label--float-above{
    -webkit-transform: translateY(calc(-100% - 2px)) scale(0.923, 0.923);
    transform: translateY(calc(-100% - 2px)) scale(0.923, 0.923);
}
.mdc-textfield--invalid:not(.mdc-textfield--focused)::after{
    background-color: #d50000;
}
.mdc-textfield--invalid:not(.mdc-textfield--focused) .mdc-textfield__label{
    color: #d50000;
}
.mdc-textfield--theme-dark.mdc-textfield--invalid:not(.mdc-textfield--focused)::after, .mdc-theme--dark .mdc-textfield--invalid:not(.mdc-textfield--focused)::after{
    background-color: #ff6e6e;
}
.mdc-textfield--theme-dark.mdc-textfield--invalid:not(.mdc-textfield--focused) .mdc-textfield__label, .mdc-theme--dark .mdc-textfield--invalid:not(.mdc-textfield--focused) .mdc-textfield__label{
    color: #ff6e6e;
}
.mdc-textfield--disabled{
    border-bottom: 1px dotted rgba(35, 31, 32, .26);
}
.mdc-textfield--disabled::after{
    display: none;
}
.mdc-textfield--disabled .mdc-textfield__input{
    padding-bottom: 7px;
}
.mdc-textfield--theme-dark.mdc-textfield--disabled, .mdc-theme--dark .mdc-textfield--disabled{
    border-bottom: 1px dotted rgba(255, 255, 255, .3);
}
.mdc-textfield--disabled .mdc-textfield__input, .mdc-textfield--disabled .mdc-textfield__label, .mdc-textfield--disabled + .mdc-textfield-helptext{
    color: rgba(0, 0, 0, .38);
    color: rgba(0, 0, 0, .38);
}
.mdc-textfield--theme-dark .mdc-textfield--disabled .mdc-textfield__input, .mdc-theme--dark .mdc-textfield--disabled .mdc-textfield__input, .mdc-textfield--theme-dark
  .mdc-textfield--disabled .mdc-textfield__label, .mdc-theme--dark
  .mdc-textfield--disabled .mdc-textfield__label{
    color: rgba(255, 255, 255, .5);
    color: rgba(255, 255, 255, .5);
}
.mdc-textfield--theme-dark.mdc-textfield--disabled + .mdc-textfield-helptext, .mdc-theme--dark .mdc-textfield--disabled + .mdc-textfield-helptext{
    color: rgba(255, 255, 255, .5);
    color: rgba(255, 255, 255, .5);
}
.mdc-textfield--disabled .mdc-textfield__label{
    bottom: 7px;
    cursor: default;
}
.mdc-textfield__input:required + .mdc-textfield__label::after{
    margin-left: 1px;
    content: "*";
}
.mdc-textfield--focused .mdc-textfield__input:required + .mdc-textfield__label::after{
    color: #d50000;
}
.mdc-textfield--focused .mdc-textfield--theme-dark .mdc-textfield__input:required + .mdc-textfield__label::after, .mdc-textfield--focused
  .mdc-theme--dark .mdc-textfield__input:required + .mdc-textfield__label::after{
    color: #ff6e6e;
}
.mdc-textfield--multiline{
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    height: auto;
    height: initial;
    transition: none;
}
.mdc-textfield--multiline::after{
    content: normal;
    content: initial;
}
.mdc-textfield--multiline .mdc-textfield__input{
    padding: 4px;
    transition: border-color 180ms cubic-bezier(0.4, 0, 0.2, 1);
    border: 1px solid rgba(0, 0, 0, .12);
    border-radius: 2px;
}
.mdc-textfield--theme-dark .mdc-textfield--multiline .mdc-textfield__input, .mdc-theme--dark .mdc-textfield--multiline .mdc-textfield__input{
    border-color: rgba(255, 255, 255, .12);
}
.mdc-textfield--multiline .mdc-textfield__input:focus{
    border-color: #3f51b5;
    border-color: #3f51b5;
}
.mdc-textfield--multiline .mdc-textfield__input:invalid:not(:focus){
    border-color: #d50000;
}
.mdc-textfield--theme-dark .mdc-textfield--multiline .mdc-textfield__input:invalid:not(:focus), .mdc-theme--dark .mdc-textfield--multiline .mdc-textfield__input:invalid:not(:focus){
    border-color: #ff6e6e;
}
.mdc-textfield--multiline .mdc-textfield__label{
    top: 6px;
    bottom: auto;
    bottom: initial;
    left: 4px;
}
[dir="rtl"] .mdc-textfield--multiline .mdc-textfield--multiline .mdc-textfield__label, .mdc-textfield--multiline[dir="rtl"] .mdc-textfield--multiline .mdc-textfield__label{
    right: 4px;
    left: auto;
}
.mdc-textfield--multiline .mdc-textfield__label--float-above{
    -webkit-transform: translateY(calc(-100% - 6px)) scale(0.923, 0.923);
    transform: translateY(calc(-100% - 6px)) scale(0.923, 0.923);
}
.mdc-textfield--multiline.mdc-textfield--disabled{
    border-bottom: none;
}
.mdc-textfield--multiline.mdc-textfield--disabled .mdc-textfield__input{
    border: 1px dotted rgba(35, 31, 32, .26);
}
.mdc-textfield--theme-dark .mdc-textfield--multiline.mdc-textfield--disabled .mdc-textfield__input, .mdc-theme--dark .mdc-textfield--multiline.mdc-textfield--disabled .mdc-textfield__input{
    border-color: rgba(255, 255, 255, .3);
}
.mdc-textfield--fullwidth{
    display: block;
    width: 100%;
    box-sizing: border-box;
    margin: 0;
    border: none;
    border-bottom: 1px solid rgba(0, 0, 0, .12);
    outline: none;
}
.mdc-textfield--fullwidth:not(.mdc-textfield--multiline){
    height: 56px;
}
.mdc-textfield--fullwidth.mdc-textfield--multiline{
    padding: 20px 0 0;
}
.mdc-textfield--fullwidth.mdc-textfield--dense:not(.mdc-textfield--multiline){
    height: 48px;
}
.mdc-textfield--fullwidth.mdc-textfield--dense.mdc-textfield--multiline{
    padding: 16px 0 0;
}
.mdc-textfield--fullwidth.mdc-textfield--disabled, .mdc-textfield--fullwidth.mdc-textfield--disabled.mdc-textfield--multiline{
    border-bottom: 1px dotted rgba(0, 0, 0, .12);
}
.mdc-textfield--fullwidth--theme-dark, .mdc-theme--dark .mdc-textfield--fullwidth{
    border-bottom: 1px solid rgba(255, 255, 255, .12);
}
.mdc-textfield--fullwidth--theme-dark.mdc-textfield--disabled, .mdc-textfield--fullwidth--theme-dark.mdc-textfield--disabled.mdc-textfield--multiline, .mdc-theme--dark .mdc-textfield--fullwidth.mdc-textfield--disabled, .mdc-theme--dark .mdc-textfield--fullwidth.mdc-textfield--disabled.mdc-textfield--multiline{
    border-bottom: 1px dotted rgba(255, 255, 255, .12);
}
.mdc-textfield--fullwidth .mdc-textfield__input{
    width: 100%;
    height: 100%;
    padding: 0;
    resize: none;
    border: none !important;
}
.mdc-textfield:not(.mdc-textfield--upgraded):not(.mdc-textfield--multiline) .mdc-textfield__input{
    transition: border-bottom-color 180ms cubic-bezier(0.4, 0, 0.2, 1);
    border-bottom: 1px solid rgba(0, 0, 0, .12);
}
.mdc-textfield:not(.mdc-textfield--upgraded) .mdc-textfield__input:focus{
    border-color: #3f51b5;
    border-color: #3f51b5;
}
.mdc-textfield:not(.mdc-textfield--upgraded) .mdc-textfield__input:disabled{
    color: rgba(0, 0, 0, .38);
    color: rgba(0, 0, 0, .38);
    border-style: dotted;
    border-color: rgba(35, 31, 32, .26);
}
.mdc-textfield:not(.mdc-textfield--upgraded) .mdc-textfield__input:invalid:not(:focus){
    border-color: #d50000;
}
.mdc-textfield--theme-dark:not(.mdc-textfield--upgraded) .mdc-textfield__input:not(:focus), .mdc-theme--dark .mdc-textfield:not(.mdc-textfield--upgraded) .mdc-textfield__input:not(:focus){
    border-color: rgba(255, 255, 255, .12);
}
.mdc-textfield--theme-dark:not(.mdc-textfield--upgraded) .mdc-textfield__input:disabled, .mdc-theme--dark .mdc-textfield:not(.mdc-textfield--upgraded) .mdc-textfield__input:disabled{
    color: rgba(255, 255, 255, .5);
    color: rgba(255, 255, 255, .5);
    border-color: rgba(255, 255, 255, .3);
}
.mdc-textfield--theme-dark:not(.mdc-textfield--upgraded) .mdc-textfield__input:invalid:not(:focus), .mdc-theme--dark .mdc-textfield:not(.mdc-textfield--upgraded) .mdc-textfield__input:invalid:not(:focus){
    border-color: #ff6e6e;
}
.mdc-textfield-helptext{
    color: rgba(0, 0, 0, .38);
    color: rgba(0, 0, 0, .38);
    margin: 0;
    transition: opacity 180ms cubic-bezier(0.4, 0, 0.2, 1);
    font-size: .75rem;
    opacity: 0;
    will-change: opacity;
}
.mdc-textfield-helptext--theme-dark, .mdc-theme--dark .mdc-textfield-helptext{
    color: rgba(255, 255, 255, .5);
    color: rgba(255, 255, 255, .5);
}
.mdc-textfield + .mdc-textfield-helptext{
    margin-bottom: 8px;
}
.mdc-textfield--dense + .mdc-textfield-helptext{
    margin-bottom: 4px;
}
.mdc-textfield--focused + .mdc-textfield-helptext:not(.mdc-textfield-helptext--validation-msg){
    opacity: 1;
}
.mdc-textfield-helptext--persistent{
    transition: none;
    opacity: 1;
    will-change: initial;
}
.mdc-textfield--invalid + .mdc-textfield-helptext--validation-msg{
    color: #d50000;
    opacity: 1;
}
.mdc-textfield--theme-dark.mdc-textfield--invalid + .mdc-textfield-helptext--validation-msg, .mdc-theme--dark .mdc-textfield--invalid + .mdc-textfield-helptext--validation-msg{
    color: #ff6e6e;
}
.mdc-form-field > .mdc-textfield + label{
    -ms-flex-item-align: start;
    align-self: flex-start;
}
/*!
 Material Components for the web
 Copyright (c) 2017 Google Inc.
 License: Apache-2.0
*/
/**
 * The css property used for elevation. In most cases this should not be changed. It is exposed
 * as a variable for abstraction / easy use when needing to reference the property directly, for
 * example in a `will-change` rule.
 */
/**
 * The default duration value for elevation transitions.
 */
/**
 * The default easing value for elevation transitions.
 */
/**
 * Applies the correct css rules to an element to give it the elevation specified by $z-value.
 * The $z-value must be between 0 and 24.
 */
/**
 * Returns a string that can be used as the value for a `transition` property for elevation.
 * Calling this function directly is useful in situations where a component needs to transition
 * more than one property.
 *
 * ```scss
 * .foo {
 *   transition: mdc-elevation-transition-rule(), opacity 100ms ease;
 *   will-change: $mdc-elevation-property, opacity;
 * }
 * ```
 */
/**
 * Applies the correct css rules needed to have an element transition between elevations.
 * This mixin should be applied to elements whose elevation values will change depending on their
 * context (e.g. when active or disabled).
 */
/*
  Precomputed linear color channel values, for use in contrast calculations.
  See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests

  Algorithm, for c in 0 to 255:
  f(c) {
    c = c / 255;
    return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
  }

  This lookup table is needed since there is no `pow` in SASS.
*/
/**
 * Calculate the luminance for a color.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Calculate the contrast ratio between two colors.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Determine whether to use dark or light text on top of given color.
 * Returns "dark" for dark text and "light" for light text.
 */
/*
  Main theme colors.
  If you're a user customizing your color scheme in SASS, these are probably the only variables you need to change.
*/
/* Indigo 500 */
/* Pink A200 */
/* White */
/* Which set of text colors to use for each main theme color (light or dark) */
/* Text colors according to light vs dark and text type */
/* Primary text colors for each of the theme colors */
/** MDC Ripple keyframes are split into their own file so that _mixins.scss can rely on them. */
@-webkit-keyframes mdc-ripple-fg-radius-in{
    from{
        -webkit-transform: translate(0) scale(1);
        transform: translate(0) scale(1);
        -webkit-animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    }
    to{
        -webkit-transform: translate(0) scale(1);
        transform: translate(0) scale(1);
    }
}
@keyframes mdc-ripple-fg-radius-in{
    from{
        -webkit-transform: translate(0) scale(1);
        transform: translate(0) scale(1);
        -webkit-animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    }
    to{
        -webkit-transform: translate(0) scale(1);
        transform: translate(0) scale(1);
    }
}
@-webkit-keyframes mdc-ripple-fg-opacity-in{
    from{
        opacity: 0;
        -webkit-animation-timing-function: linear;
        animation-timing-function: linear;
    }
    to{
        opacity: 1;
    }
}
@keyframes mdc-ripple-fg-opacity-in{
    from{
        opacity: 0;
        -webkit-animation-timing-function: linear;
        animation-timing-function: linear;
    }
    to{
        opacity: 1;
    }
}
@-webkit-keyframes mdc-ripple-fg-opacity-out{
    from{
        opacity: 1;
        -webkit-animation-timing-function: linear;
        animation-timing-function: linear;
    }
    to{
        opacity: 0;
    }
}
@keyframes mdc-ripple-fg-opacity-out{
    from{
        opacity: 1;
        -webkit-animation-timing-function: linear;
        animation-timing-function: linear;
    }
    to{
        opacity: 0;
    }
}
/*
  Precomputed linear color channel values, for use in contrast calculations.
  See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests

  Algorithm, for c in 0 to 255:
  f(c) {
    c = c / 255;
    return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
  }

  This lookup table is needed since there is no `pow` in SASS.
*/
/**
 * Calculate the luminance for a color.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Calculate the contrast ratio between two colors.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Determine whether to use dark or light text on top of given color.
 * Returns "dark" for dark text and "light" for light text.
 */
/*
  Main theme colors.
  If you're a user customizing your color scheme in SASS, these are probably the only variables you need to change.
*/
/* Indigo 500 */
/* Pink A200 */
/* White */
/* Which set of text colors to use for each main theme color (light or dark) */
/* Text colors according to light vs dark and text type */
/* Primary text colors for each of the theme colors */
/**
 * Applies the correct theme color style to the specified property.
 * $property is typically color or background-color, but can be any CSS property that accepts color values.
 * $style should be one of the map keys in $mdc-theme-property-values (_variables.scss).
 */
/**
 * Creates a rule to be used in MDC-Web components for dark theming, and applies the provided contents.
 * Should provide the $root-selector option if applied to anything other than the root selector.
 * When used with a modifier class, provide a second argument of `true` for the $compound parameter
 * to specify that this should be attached as a compound class.
 *
 * Usage example:
 *
 * ```scss
 * .mdc-foo {
 *   color: black;
 *
 *   @include mdc-theme-dark {
 *     color: white;
 *   }
 *
 *   &__bar {
 *     background: black;
 *
 *     @include mdc-theme-dark(".mdc-foo") {
 *       background: white;
 *     }
 *   }
 * }
 *
 * .mdc-foo--disabled {
 *   opacity: .38;
 *
 *   @include mdc-theme-dark(".mdc-foo", true) {
 *     opacity: .5;
 *   }
 * }
 * ```
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
.mdc-button{
    --mdc-ripple-surface-width: 0;
    --mdc-ripple-surface-height: 0;
    --mdc-ripple-fg-size: 0;
    --mdc-ripple-left: 0;
    --mdc-ripple-top: 0;
    --mdc-ripple-fg-scale: 1;
    --mdc-ripple-fg-translate-end: 0;
    --mdc-ripple-fg-translate-start: 0;
    will-change: transform, opacity;
    -webkit-tap-highlight-color: transparent;
    font-family: Roboto, sans-serif;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-size: 0.875rem;
    font-weight: 500;
    letter-spacing: 0.04em;
    line-height: 1.5rem;
    color: rgba(0, 0, 0, .87);
    color: rgba(0, 0, 0, .87);
    display: inline-block;
    position: relative;
    min-width: 64px;
    height: 36px;
    padding: 0 16px;
    border: none;
    border-radius: 2px;
    outline: none;
    background: transparent;
    font-size: 14px;
    font-weight: 500;
    line-height: 36px;
    text-align: center;
    text-decoration: none;
    text-transform: uppercase;
    overflow: hidden;
    vertical-align: middle;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    box-sizing: border-box;
    -webkit-appearance: none;
}
.mdc-button:not(.mdc-ripple-upgraded):hover::before, .mdc-button:not(.mdc-ripple-upgraded):focus::before, .mdc-button:not(.mdc-ripple-upgraded):active::after{
    transition-duration: 85ms;
    opacity: .6;
}
.mdc-button::before{
    background-color: rgba(0, 0, 0, .06);
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    transition: opacity 250ms linear;
    border-radius: 50%;
    opacity: 0;
    pointer-events: none;
    content: "";
}
.mdc-button.mdc-ripple-upgraded::before{
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    -webkit-transform: scale(0);
    transform: scale(0);
    -webkit-transform: scale(0);
    transform: scale(0);
}
.mdc-button.mdc-ripple-upgraded--background-focused::before{
    opacity: .99999;
}
.mdc-button.mdc-ripple-upgraded--background-active-fill::before{
    transition-duration: 120ms;
    opacity: 1;
}
.mdc-button.mdc-ripple-upgraded--unbounded::before{
    top: 0%;
    top: 0%;
    left: 0%;
    left: 0%;
    width: 100%;
    width: 100%;
    height: 100%;
    height: 100%;
    -webkit-transform: scale(0);
    transform: scale(0);
    -webkit-transform: scale(0);
    transform: scale(0);
}
.mdc-button::after{
    background-color: rgba(0, 0, 0, .06);
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    transition: opacity 250ms linear;
    border-radius: 50%;
    opacity: 0;
    pointer-events: none;
    content: "";
}
.mdc-button.mdc-ripple-upgraded::after{
    top: 0;
    left: 0;
    width: 100%;
    width: 100%;
    height: 100%;
    height: 100%;
    -webkit-transform: scale(0);
    transform: scale(0);
    -webkit-transform-origin: center center;
    transform-origin: center center;
    opacity: 0;
}
.mdc-button:not(.mdc-ripple-upgraded--unbounded)::after{
    -webkit-transform-origin: center center;
    transform-origin: center center;
}
.mdc-button.mdc-ripple-upgraded--unbounded::after{
    top: 0;
    top: 0;
    left: 0;
    left: 0;
    width: 100%;
    width: 100%;
    height: 100%;
    height: 100%;
    -webkit-transform: scale(0);
    transform: scale(0);
    -webkit-transform-origin: center center;
    transform-origin: center center;
}
.mdc-button.mdc-ripple-upgraded--foreground-activation::after{
    -webkit-animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards;
    animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards;
}
.mdc-button.mdc-ripple-upgraded--foreground-deactivation::after{
    -webkit-transform: translate(0) scale(1);
    transform: translate(0) scale(1);
    -webkit-animation: 250ms mdc-ripple-fg-opacity-out;
    animation: 250ms mdc-ripple-fg-opacity-out;
}
.mdc-button:not(.mdc-ripple-upgraded){
    -webkit-tap-highlight-color: rgba(0, 0, 0, .18);
}
.mdc-button--theme-dark, .mdc-theme--dark .mdc-button{
    --mdc-ripple-surface-width: 0;
    --mdc-ripple-surface-height: 0;
    --mdc-ripple-fg-size: 0;
    --mdc-ripple-left: 0;
    --mdc-ripple-top: 0;
    --mdc-ripple-fg-scale: 1;
    --mdc-ripple-fg-translate-end: 0;
    --mdc-ripple-fg-translate-start: 0;
    will-change: transform, opacity;
    -webkit-tap-highlight-color: transparent;
    color: white;
    color: white;
}
.mdc-button--theme-dark:not(.mdc-ripple-upgraded):hover::before, .mdc-button--theme-dark:not(.mdc-ripple-upgraded):focus::before, .mdc-button--theme-dark:not(.mdc-ripple-upgraded):active::after, .mdc-theme--dark .mdc-button:not(.mdc-ripple-upgraded):hover::before, .mdc-theme--dark .mdc-button:not(.mdc-ripple-upgraded):focus::before, .mdc-theme--dark .mdc-button:not(.mdc-ripple-upgraded):active::after{
    transition-duration: 85ms;
    opacity: .6;
}
.mdc-button--theme-dark::before, .mdc-theme--dark .mdc-button::before{
    background-color: rgba(255, 255, 255, .14);
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    transition: opacity 250ms linear;
    border-radius: 50%;
    opacity: 0;
    pointer-events: none;
    content: "";
}
.mdc-button--theme-dark.mdc-ripple-upgraded::before, .mdc-theme--dark .mdc-button.mdc-ripple-upgraded::before{
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    -webkit-transform: scale(0);
    transform: scale(0);
    -webkit-transform: scale(0);
    transform: scale(0);
}
.mdc-button--theme-dark.mdc-ripple-upgraded--background-focused::before, .mdc-theme--dark .mdc-button.mdc-ripple-upgraded--background-focused::before{
    opacity: .99999;
}
.mdc-button--theme-dark.mdc-ripple-upgraded--background-active-fill::before, .mdc-theme--dark .mdc-button.mdc-ripple-upgraded--background-active-fill::before{
    transition-duration: 120ms;
    opacity: 1;
}
.mdc-button--theme-dark.mdc-ripple-upgraded--unbounded::before, .mdc-theme--dark .mdc-button.mdc-ripple-upgraded--unbounded::before{
    top: 0%;
    top: 0%;
    left: 0%;
    left: 0%;
    width: 100%;
    width: 100%;
    height: 100%;
    height: 100%;
    -webkit-transform: scale(0);
    transform: scale(0);
    -webkit-transform: scale(0);
    transform: scale(0);
}
.mdc-button--theme-dark::after, .mdc-theme--dark .mdc-button::after{
    background-color: rgba(255, 255, 255, .14);
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    transition: opacity 250ms linear;
    border-radius: 50%;
    opacity: 0;
    pointer-events: none;
    content: "";
}
.mdc-button--theme-dark.mdc-ripple-upgraded::after, .mdc-theme--dark .mdc-button.mdc-ripple-upgraded::after{
    top: 0;
    left: 0;
    width: 100%;
    width: 100%;
    height: 100%;
    height: 100%;
    -webkit-transform: scale(0);
    transform: scale(0);
    -webkit-transform-origin: center center;
    transform-origin: center center;
    opacity: 0;
}
.mdc-button--theme-dark:not(.mdc-ripple-upgraded--unbounded)::after, .mdc-theme--dark .mdc-button:not(.mdc-ripple-upgraded--unbounded)::after{
    -webkit-transform-origin: center center;
    transform-origin: center center;
}
.mdc-button--theme-dark.mdc-ripple-upgraded--unbounded::after, .mdc-theme--dark .mdc-button.mdc-ripple-upgraded--unbounded::after{
    top: 0;
    top: 0;
    left: 0;
    left: 0;
    width: 100%;
    width: 100%;
    height: 100%;
    height: 100%;
    -webkit-transform: scale(0);
    transform: scale(0);
    -webkit-transform-origin: center center;
    transform-origin: center center;
}
.mdc-button--theme-dark.mdc-ripple-upgraded--foreground-activation::after, .mdc-theme--dark .mdc-button.mdc-ripple-upgraded--foreground-activation::after{
    -webkit-animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards;
    animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards;
}
.mdc-button--theme-dark.mdc-ripple-upgraded--foreground-deactivation::after, .mdc-theme--dark .mdc-button.mdc-ripple-upgraded--foreground-deactivation::after{
    -webkit-transform: translate(0) scale(1);
    transform: translate(0) scale(1);
    -webkit-animation: 250ms mdc-ripple-fg-opacity-out;
    animation: 250ms mdc-ripple-fg-opacity-out;
}
.mdc-button--theme-dark:not(.mdc-ripple-upgraded), .mdc-theme--dark .mdc-button:not(.mdc-ripple-upgraded){
    -webkit-tap-highlight-color: rgba(255, 255, 255, .18);
}
.mdc-button.mdc-button--primary{
    --mdc-ripple-surface-width: 0;
    --mdc-ripple-surface-height: 0;
    --mdc-ripple-fg-size: 0;
    --mdc-ripple-left: 0;
    --mdc-ripple-top: 0;
    --mdc-ripple-fg-scale: 1;
    --mdc-ripple-fg-translate-end: 0;
    --mdc-ripple-fg-translate-start: 0;
    will-change: transform, opacity;
    -webkit-tap-highlight-color: transparent;
}
.mdc-button.mdc-button--primary:not(.mdc-ripple-upgraded):hover::before, .mdc-button.mdc-button--primary:not(.mdc-ripple-upgraded):focus::before, .mdc-button.mdc-button--primary:not(.mdc-ripple-upgraded):active::after{
    transition-duration: 85ms;
    opacity: .6;
}
.mdc-button.mdc-button--primary::before{
    background-color: rgba(63, 81, 181, .12);
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    transition: opacity 250ms linear;
    border-radius: 50%;
    opacity: 0;
    pointer-events: none;
    content: "";
}
@supports (background-color: color(green a(10%))){
    .mdc-button.mdc-button--primary::before{
        background-color: rgba(63, 81, 181, .12);
    }
}
.mdc-button.mdc-button--primary.mdc-ripple-upgraded::before{
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    -webkit-transform: scale(0);
    transform: scale(0);
    -webkit-transform: scale(0);
    transform: scale(0);
}
.mdc-button.mdc-button--primary.mdc-ripple-upgraded--background-focused::before{
    opacity: .99999;
}
.mdc-button.mdc-button--primary.mdc-ripple-upgraded--background-active-fill::before{
    transition-duration: 120ms;
    opacity: 1;
}
.mdc-button.mdc-button--primary.mdc-ripple-upgraded--unbounded::before{
    top: 0%;
    top: 0%;
    left: 0%;
    left: 0%;
    width: 100%;
    width: 100%;
    height: 100%;
    height: 100%;
    -webkit-transform: scale(0);
    transform: scale(0);
    -webkit-transform: scale(0);
    transform: scale(0);
}
.mdc-button.mdc-button--primary::after{
    background-color: rgba(63, 81, 181, .12);
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    transition: opacity 250ms linear;
    border-radius: 50%;
    opacity: 0;
    pointer-events: none;
    content: "";
}
@supports (background-color: color(green a(10%))){
    .mdc-button.mdc-button--primary::after{
        background-color: rgba(63, 81, 181, .12);
    }
}
.mdc-button.mdc-button--primary.mdc-ripple-upgraded::after{
    top: 0;
    left: 0;
    width: 100%;
    width: 100%;
    height: 100%;
    height: 100%;
    -webkit-transform: scale(0);
    transform: scale(0);
    -webkit-transform-origin: center center;
    transform-origin: center center;
    opacity: 0;
}
.mdc-button.mdc-button--primary:not(.mdc-ripple-upgraded--unbounded)::after{
    -webkit-transform-origin: center center;
    transform-origin: center center;
}
.mdc-button.mdc-button--primary.mdc-ripple-upgraded--unbounded::after{
    top: 0;
    top: 0;
    left: 0;
    left: 0;
    width: 100%;
    width: 100%;
    height: 100%;
    height: 100%;
    -webkit-transform: scale(0);
    transform: scale(0);
    -webkit-transform-origin: center center;
    transform-origin: center center;
}
.mdc-button.mdc-button--primary.mdc-ripple-upgraded--foreground-activation::after{
    -webkit-animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards;
    animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards;
}
.mdc-button.mdc-button--primary.mdc-ripple-upgraded--foreground-deactivation::after{
    -webkit-transform: translate(0) scale(1);
    transform: translate(0) scale(1);
    -webkit-animation: 250ms mdc-ripple-fg-opacity-out;
    animation: 250ms mdc-ripple-fg-opacity-out;
}
.mdc-button.mdc-button--accent{
    --mdc-ripple-surface-width: 0;
    --mdc-ripple-surface-height: 0;
    --mdc-ripple-fg-size: 0;
    --mdc-ripple-left: 0;
    --mdc-ripple-top: 0;
    --mdc-ripple-fg-scale: 1;
    --mdc-ripple-fg-translate-end: 0;
    --mdc-ripple-fg-translate-start: 0;
    will-change: transform, opacity;
    -webkit-tap-highlight-color: transparent;
}
.mdc-button.mdc-button--accent:not(.mdc-ripple-upgraded):hover::before, .mdc-button.mdc-button--accent:not(.mdc-ripple-upgraded):focus::before, .mdc-button.mdc-button--accent:not(.mdc-ripple-upgraded):active::after{
    transition-duration: 85ms;
    opacity: .6;
}
.mdc-button.mdc-button--accent::before{
    background-color: rgba(255, 64, 129, .12);
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    transition: opacity 250ms linear;
    border-radius: 50%;
    opacity: 0;
    pointer-events: none;
    content: "";
}
@supports (background-color: color(green a(10%))){
    .mdc-button.mdc-button--accent::before{
        background-color: rgba(255, 64, 129, .12);
    }
}
.mdc-button.mdc-button--accent.mdc-ripple-upgraded::before{
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    -webkit-transform: scale(0);
    transform: scale(0);
    -webkit-transform: scale(0);
    transform: scale(0);
}
.mdc-button.mdc-button--accent.mdc-ripple-upgraded--background-focused::before{
    opacity: .99999;
}
.mdc-button.mdc-button--accent.mdc-ripple-upgraded--background-active-fill::before{
    transition-duration: 120ms;
    opacity: 1;
}
.mdc-button.mdc-button--accent.mdc-ripple-upgraded--unbounded::before{
    top: 0%;
    top: 0%;
    left: 0%;
    left: 0%;
    width: 100%;
    width: 100%;
    height: 100%;
    height: 100%;
    -webkit-transform: scale(0);
    transform: scale(0);
    -webkit-transform: scale(0);
    transform: scale(0);
}
.mdc-button.mdc-button--accent::after{
    background-color: rgba(255, 64, 129, .12);
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    transition: opacity 250ms linear;
    border-radius: 50%;
    opacity: 0;
    pointer-events: none;
    content: "";
}
@supports (background-color: color(green a(10%))){
    .mdc-button.mdc-button--accent::after{
        background-color: rgba(255, 64, 129, .12);
    }
}
.mdc-button.mdc-button--accent.mdc-ripple-upgraded::after{
    top: 0;
    left: 0;
    width: 100%;
    width: 100%;
    height: 100%;
    height: 100%;
    -webkit-transform: scale(0);
    transform: scale(0);
    -webkit-transform-origin: center center;
    transform-origin: center center;
    opacity: 0;
}
.mdc-button.mdc-button--accent:not(.mdc-ripple-upgraded--unbounded)::after{
    -webkit-transform-origin: center center;
    transform-origin: center center;
}
.mdc-button.mdc-button--accent.mdc-ripple-upgraded--unbounded::after{
    top: 0;
    top: 0;
    left: 0;
    left: 0;
    width: 100%;
    width: 100%;
    height: 100%;
    height: 100%;
    -webkit-transform: scale(0);
    transform: scale(0);
    -webkit-transform-origin: center center;
    transform-origin: center center;
}
.mdc-button.mdc-button--accent.mdc-ripple-upgraded--foreground-activation::after{
    -webkit-animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards;
    animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards;
}
.mdc-button.mdc-button--accent.mdc-ripple-upgraded--foreground-deactivation::after{
    -webkit-transform: translate(0) scale(1);
    transform: translate(0) scale(1);
    -webkit-animation: 250ms mdc-ripple-fg-opacity-out;
    animation: 250ms mdc-ripple-fg-opacity-out;
}
.mdc-button:active{
    outline: none;
}
.mdc-button:hover{
    cursor: pointer;
}
.mdc-button::-moz-focus-inner{
    padding: 0;
    border: 0;
}
.mdc-button--dense{
    height: 32px;
    font-size: .8125rem;
    line-height: 32px;
}
.mdc-button--raised{
    box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, .2), 0px 2px 2px 0px rgba(0, 0, 0, .14), 0px 1px 5px 0px rgba(0, 0, 0, .12);
    transition: box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);
    will-change: box-shadow;
    min-width: 88px;
}
.mdc-button--raised:active{
    box-shadow: 0px 5px 5px -3px rgba(0, 0, 0, .2), 0px 8px 10px 1px rgba(0, 0, 0, .14), 0px 3px 14px 2px rgba(0, 0, 0, .12);
}
.mdc-button--raised.mdc-button--primary{
    --mdc-ripple-surface-width: 0;
    --mdc-ripple-surface-height: 0;
    --mdc-ripple-fg-size: 0;
    --mdc-ripple-left: 0;
    --mdc-ripple-top: 0;
    --mdc-ripple-fg-scale: 1;
    --mdc-ripple-fg-translate-end: 0;
    --mdc-ripple-fg-translate-start: 0;
    will-change: transform, opacity;
    -webkit-tap-highlight-color: transparent;
}
.mdc-button--raised.mdc-button--primary:not(.mdc-ripple-upgraded):hover::before, .mdc-button--raised.mdc-button--primary:not(.mdc-ripple-upgraded):focus::before, .mdc-button--raised.mdc-button--primary:not(.mdc-ripple-upgraded):active::after{
    transition-duration: 85ms;
    opacity: .6;
}
.mdc-button--raised.mdc-button--primary::before{
    background-color: rgba(255, 255, 255, .14);
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    transition: opacity 250ms linear;
    border-radius: 50%;
    opacity: 0;
    pointer-events: none;
    content: "";
}
.mdc-button--raised.mdc-button--primary.mdc-ripple-upgraded::before{
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    -webkit-transform: scale(0);
    transform: scale(0);
    -webkit-transform: scale(0);
    transform: scale(0);
}
.mdc-button--raised.mdc-button--primary.mdc-ripple-upgraded--background-focused::before{
    opacity: .99999;
}
.mdc-button--raised.mdc-button--primary.mdc-ripple-upgraded--background-active-fill::before{
    transition-duration: 120ms;
    opacity: 1;
}
.mdc-button--raised.mdc-button--primary.mdc-ripple-upgraded--unbounded::before{
    top: 0%;
    top: 0%;
    left: 0%;
    left: 0%;
    width: 100%;
    width: 100%;
    height: 100%;
    height: 100%;
    -webkit-transform: scale(0);
    transform: scale(0);
    -webkit-transform: scale(0);
    transform: scale(0);
}
.mdc-button--raised.mdc-button--primary::after{
    background-color: rgba(255, 255, 255, .14);
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    transition: opacity 250ms linear;
    border-radius: 50%;
    opacity: 0;
    pointer-events: none;
    content: "";
}
.mdc-button--raised.mdc-button--primary.mdc-ripple-upgraded::after{
    top: 0;
    left: 0;
    width: 100%;
    width: 100%;
    height: 100%;
    height: 100%;
    -webkit-transform: scale(0);
    transform: scale(0);
    -webkit-transform-origin: center center;
    transform-origin: center center;
    opacity: 0;
}
.mdc-button--raised.mdc-button--primary:not(.mdc-ripple-upgraded--unbounded)::after{
    -webkit-transform-origin: center center;
    transform-origin: center center;
}
.mdc-button--raised.mdc-button--primary.mdc-ripple-upgraded--unbounded::after{
    top: 0;
    top: 0;
    left: 0;
    left: 0;
    width: 100%;
    width: 100%;
    height: 100%;
    height: 100%;
    -webkit-transform: scale(0);
    transform: scale(0);
    -webkit-transform-origin: center center;
    transform-origin: center center;
}
.mdc-button--raised.mdc-button--primary.mdc-ripple-upgraded--foreground-activation::after{
    -webkit-animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards;
    animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards;
}
.mdc-button--raised.mdc-button--primary.mdc-ripple-upgraded--foreground-deactivation::after{
    -webkit-transform: translate(0) scale(1);
    transform: translate(0) scale(1);
    -webkit-animation: 250ms mdc-ripple-fg-opacity-out;
    animation: 250ms mdc-ripple-fg-opacity-out;
}
.mdc-button--raised.mdc-button--accent{
    --mdc-ripple-surface-width: 0;
    --mdc-ripple-surface-height: 0;
    --mdc-ripple-fg-size: 0;
    --mdc-ripple-left: 0;
    --mdc-ripple-top: 0;
    --mdc-ripple-fg-scale: 1;
    --mdc-ripple-fg-translate-end: 0;
    --mdc-ripple-fg-translate-start: 0;
    will-change: transform, opacity;
    -webkit-tap-highlight-color: transparent;
}
.mdc-button--raised.mdc-button--accent:not(.mdc-ripple-upgraded):hover::before, .mdc-button--raised.mdc-button--accent:not(.mdc-ripple-upgraded):focus::before, .mdc-button--raised.mdc-button--accent:not(.mdc-ripple-upgraded):active::after{
    transition-duration: 85ms;
    opacity: .6;
}
.mdc-button--raised.mdc-button--accent::before{
    background-color: rgba(255, 255, 255, .14);
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    transition: opacity 250ms linear;
    border-radius: 50%;
    opacity: 0;
    pointer-events: none;
    content: "";
}
.mdc-button--raised.mdc-button--accent.mdc-ripple-upgraded::before{
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    -webkit-transform: scale(0);
    transform: scale(0);
    -webkit-transform: scale(0);
    transform: scale(0);
}
.mdc-button--raised.mdc-button--accent.mdc-ripple-upgraded--background-focused::before{
    opacity: .99999;
}
.mdc-button--raised.mdc-button--accent.mdc-ripple-upgraded--background-active-fill::before{
    transition-duration: 120ms;
    opacity: 1;
}
.mdc-button--raised.mdc-button--accent.mdc-ripple-upgraded--unbounded::before{
    top: 0%;
    top: 0%;
    left: 0%;
    left: 0%;
    width: 100%;
    width: 100%;
    height: 100%;
    height: 100%;
    -webkit-transform: scale(0);
    transform: scale(0);
    -webkit-transform: scale(0);
    transform: scale(0);
}
.mdc-button--raised.mdc-button--accent::after{
    background-color: rgba(255, 255, 255, .14);
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    transition: opacity 250ms linear;
    border-radius: 50%;
    opacity: 0;
    pointer-events: none;
    content: "";
}
.mdc-button--raised.mdc-button--accent.mdc-ripple-upgraded::after{
    top: 0;
    left: 0;
    width: 100%;
    width: 100%;
    height: 100%;
    height: 100%;
    -webkit-transform: scale(0);
    transform: scale(0);
    -webkit-transform-origin: center center;
    transform-origin: center center;
    opacity: 0;
}
.mdc-button--raised.mdc-button--accent:not(.mdc-ripple-upgraded--unbounded)::after{
    -webkit-transform-origin: center center;
    transform-origin: center center;
}
.mdc-button--raised.mdc-button--accent.mdc-ripple-upgraded--unbounded::after{
    top: 0;
    top: 0;
    left: 0;
    left: 0;
    width: 100%;
    width: 100%;
    height: 100%;
    height: 100%;
    -webkit-transform: scale(0);
    transform: scale(0);
    -webkit-transform-origin: center center;
    transform-origin: center center;
}
.mdc-button--raised.mdc-button--accent.mdc-ripple-upgraded--foreground-activation::after{
    -webkit-animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards;
    animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards;
}
.mdc-button--raised.mdc-button--accent.mdc-ripple-upgraded--foreground-deactivation::after{
    -webkit-transform: translate(0) scale(1);
    transform: translate(0) scale(1);
    -webkit-animation: 250ms mdc-ripple-fg-opacity-out;
    animation: 250ms mdc-ripple-fg-opacity-out;
}
.mdc-button--theme-dark .mdc-button--raised, .mdc-theme--dark .mdc-button--raised{
    background-color: #3f51b5;
    background-color: #3f51b5;
}
.mdc-button--theme-dark .mdc-button--raised::before, .mdc-theme--dark .mdc-button--raised::before{
    color: black;
}
.mdc-button--primary{
    color: #3f51b5;
    color: #3f51b5;
}
.mdc-button--theme-dark .mdc-button--primary, .mdc-theme--dark .mdc-button--primary{
    color: #3f51b5;
    color: #3f51b5;
}
.mdc-button--primary.mdc-button--raised{
    background-color: #3f51b5;
    background-color: #3f51b5;
    color: white;
    color: white;
}
.mdc-button--primary.mdc-button--raised::before{
    color: black;
}
.mdc-button--accent{
    color: #ff4081;
    color: #ff4081;
}
.mdc-button--theme-dark .mdc-button--accent, .mdc-theme--dark .mdc-button--accent{
    color: #ff4081;
    color: #ff4081;
}
.mdc-button--accent.mdc-button--raised{
    background-color: #ff4081;
    background-color: #ff4081;
    color: white;
    color: white;
}
.mdc-button--accent.mdc-button--raised::before{
    color: black;
}
.mdc-button--compact{
    padding: 0 8px;
}
fieldset:disabled .mdc-button, .mdc-button:disabled{
    color: rgba(0, 0, 0, .26);
    cursor: default;
    pointer-events: none;
}
.mdc-button--theme-dark fieldset:disabled .mdc-button, .mdc-theme--dark fieldset:disabled .mdc-button, .mdc-button--theme-dark .mdc-button:disabled, .mdc-theme--dark .mdc-button:disabled{
    color: rgba(255, 255, 255, .3);
}
fieldset:disabled .mdc-button--raised, .mdc-button--raised:disabled{
    box-shadow: 0px 0px 0px 0px rgba(0, 0, 0, .2), 0px 0px 0px 0px rgba(0, 0, 0, .14), 0px 0px 0px 0px rgba(0, 0, 0, .12);
    background-color: rgba(0, 0, 0, .12);
    pointer-events: none;
}
.mdc-button--theme-dark fieldset:disabled .mdc-button--raised, .mdc-theme--dark fieldset:disabled .mdc-button--raised, .mdc-button--theme-dark .mdc-button--raised:disabled, .mdc-theme--dark .mdc-button--raised:disabled{
    background-color: rgba(255, 255, 255, .12);
}
/*!
 Material Components for the web
 Copyright (c) 2017 Google Inc.
 License: Apache-2.0
*/
/*
  Precomputed linear color channel values, for use in contrast calculations.
  See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests

  Algorithm, for c in 0 to 255:
  f(c) {
    c = c / 255;
    return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
  }

  This lookup table is needed since there is no `pow` in SASS.
*/
/**
 * Calculate the luminance for a color.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Calculate the contrast ratio between two colors.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Determine whether to use dark or light text on top of given color.
 * Returns "dark" for dark text and "light" for light text.
 */
/*
  Main theme colors.
  If you're a user customizing your color scheme in SASS, these are probably the only variables you need to change.
*/
/* Indigo 500 */
/* Pink A200 */
/* White */
/* Which set of text colors to use for each main theme color (light or dark) */
/* Text colors according to light vs dark and text type */
/* Primary text colors for each of the theme colors */
/** MDC Ripple keyframes are split into their own file so that _mixins.scss can rely on them. */
@-webkit-keyframes mdc-ripple-fg-radius-in{
    from{
        -webkit-transform: translate(0) scale(1);
        transform: translate(0) scale(1);
        -webkit-animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    }
    to{
        -webkit-transform: translate(0) scale(1);
        transform: translate(0) scale(1);
    }
}
@keyframes mdc-ripple-fg-radius-in{
    from{
        -webkit-transform: translate(0) scale(1);
        transform: translate(0) scale(1);
        -webkit-animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
        animation-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    }
    to{
        -webkit-transform: translate(0) scale(1);
        transform: translate(0) scale(1);
    }
}
@-webkit-keyframes mdc-ripple-fg-opacity-in{
    from{
        opacity: 0;
        -webkit-animation-timing-function: linear;
        animation-timing-function: linear;
    }
    to{
        opacity: 1;
    }
}
@keyframes mdc-ripple-fg-opacity-in{
    from{
        opacity: 0;
        -webkit-animation-timing-function: linear;
        animation-timing-function: linear;
    }
    to{
        opacity: 1;
    }
}
@-webkit-keyframes mdc-ripple-fg-opacity-out{
    from{
        opacity: 1;
        -webkit-animation-timing-function: linear;
        animation-timing-function: linear;
    }
    to{
        opacity: 0;
    }
}
@keyframes mdc-ripple-fg-opacity-out{
    from{
        opacity: 1;
        -webkit-animation-timing-function: linear;
        animation-timing-function: linear;
    }
    to{
        opacity: 0;
    }
}
/**
 * Creates a rule that will be applied when an MDC-Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box-property(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/* Manual calculation done on SVG */
/*
  Precomputed linear color channel values, for use in contrast calculations.
  See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests

  Algorithm, for c in 0 to 255:
  f(c) {
    c = c / 255;
    return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
  }

  This lookup table is needed since there is no `pow` in SASS.
*/
/**
 * Calculate the luminance for a color.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Calculate the contrast ratio between two colors.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Determine whether to use dark or light text on top of given color.
 * Returns "dark" for dark text and "light" for light text.
 */
/*
  Main theme colors.
  If you're a user customizing your color scheme in SASS, these are probably the only variables you need to change.
*/
/* Indigo 500 */
/* Pink A200 */
/* White */
/* Which set of text colors to use for each main theme color (light or dark) */
/* Text colors according to light vs dark and text type */
/* Primary text colors for each of the theme colors */
/**
 * Applies the correct theme color style to the specified property.
 * $property is typically color or background-color, but can be any CSS property that accepts color values.
 * $style should be one of the map keys in $mdc-theme-property-values (_variables.scss).
 */
/**
 * Creates a rule to be used in MDC-Web components for dark theming, and applies the provided contents.
 * Should provide the $root-selector option if applied to anything other than the root selector.
 * When used with a modifier class, provide a second argument of `true` for the $compound parameter
 * to specify that this should be attached as a compound class.
 *
 * Usage example:
 *
 * ```scss
 * .mdc-foo {
 *   color: black;
 *
 *   @include mdc-theme-dark {
 *     color: white;
 *   }
 *
 *   &__bar {
 *     background: black;
 *
 *     @include mdc-theme-dark(".mdc-foo") {
 *       background: white;
 *     }
 *   }
 * }
 *
 * .mdc-foo--disabled {
 *   opacity: .38;
 *
 *   @include mdc-theme-dark(".mdc-foo", true) {
 *     opacity: .5;
 *   }
 * }
 * ```
 */
/* Manual calculation done on SVG */
@-webkit-keyframes mdc-checkbox-fade-in-background{
    0%{
        border-color: rgba(0, 0, 0, .54);
        background-color: transparent;
    }
    50%{
        border-color: #3f51b5;
        border-color: #3f51b5;
        background-color: #3f51b5;
        background-color: #3f51b5;
    }
}
@keyframes mdc-checkbox-fade-in-background{
    0%{
        border-color: rgba(0, 0, 0, .54);
        background-color: transparent;
    }
    50%{
        border-color: #3f51b5;
        border-color: #3f51b5;
        background-color: #3f51b5;
        background-color: #3f51b5;
    }
}
@-webkit-keyframes mdc-checkbox-fade-out-background{
    0%, 80%{
        border-color: #3f51b5;
        border-color: #3f51b5;
        background-color: #3f51b5;
        background-color: #3f51b5;
    }
    100%{
        border-color: rgba(0, 0, 0, .54);
        background-color: transparent;
    }
}
@keyframes mdc-checkbox-fade-out-background{
    0%, 80%{
        border-color: #3f51b5;
        border-color: #3f51b5;
        background-color: #3f51b5;
        background-color: #3f51b5;
    }
    100%{
        border-color: rgba(0, 0, 0, .54);
        background-color: transparent;
    }
}
@-webkit-keyframes mdc-checkbox-fade-in-background-dark{
    0%{
        border-color: white;
        background-color: transparent;
    }
    50%{
        border-color: #3f51b5;
        border-color: #3f51b5;
        background-color: #3f51b5;
        background-color: #3f51b5;
    }
}
@keyframes mdc-checkbox-fade-in-background-dark{
    0%{
        border-color: white;
        background-color: transparent;
    }
    50%{
        border-color: #3f51b5;
        border-color: #3f51b5;
        background-color: #3f51b5;
        background-color: #3f51b5;
    }
}
@-webkit-keyframes mdc-checkbox-fade-out-background-dark{
    0%, 80%{
        border-color: #3f51b5;
        border-color: #3f51b5;
        background-color: #3f51b5;
        background-color: #3f51b5;
    }
    100%{
        border-color: white;
        background-color: transparent;
    }
}
@keyframes mdc-checkbox-fade-out-background-dark{
    0%, 80%{
        border-color: #3f51b5;
        border-color: #3f51b5;
        background-color: #3f51b5;
        background-color: #3f51b5;
    }
    100%{
        border-color: white;
        background-color: transparent;
    }
}
@-webkit-keyframes mdc-checkbox-unchecked-checked-checkmark-path{
    0%, 50%{
        stroke-dashoffset: 29.78334;
    }
    50%{
        -webkit-animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
        animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
    }
    100%{
        stroke-dashoffset: 0;
    }
}
@keyframes mdc-checkbox-unchecked-checked-checkmark-path{
    0%, 50%{
        stroke-dashoffset: 29.78334;
    }
    50%{
        -webkit-animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
        animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
    }
    100%{
        stroke-dashoffset: 0;
    }
}
@-webkit-keyframes mdc-checkbox-unchecked-indeterminate-mixedmark{
    0%, 68.2%{
        -webkit-transform: scaleX(0);
        transform: scaleX(0);
    }
    68.2%{
        -webkit-animation-timing-function: cubic-bezier(0, 0, 0, 1);
        animation-timing-function: cubic-bezier(0, 0, 0, 1);
    }
    100%{
        -webkit-transform: scaleX(1);
        transform: scaleX(1);
    }
}
@keyframes mdc-checkbox-unchecked-indeterminate-mixedmark{
    0%, 68.2%{
        -webkit-transform: scaleX(0);
        transform: scaleX(0);
    }
    68.2%{
        -webkit-animation-timing-function: cubic-bezier(0, 0, 0, 1);
        animation-timing-function: cubic-bezier(0, 0, 0, 1);
    }
    100%{
        -webkit-transform: scaleX(1);
        transform: scaleX(1);
    }
}
@-webkit-keyframes mdc-checkbox-checked-unchecked-checkmark-path{
    from{
        -webkit-animation-timing-function: cubic-bezier(0.4, 0, 1, 1);
        animation-timing-function: cubic-bezier(0.4, 0, 1, 1);
        opacity: 1;
        stroke-dashoffset: 0;
    }
    to{
        opacity: 0;
        stroke-dashoffset: -29.78334;
    }
}
@keyframes mdc-checkbox-checked-unchecked-checkmark-path{
    from{
        -webkit-animation-timing-function: cubic-bezier(0.4, 0, 1, 1);
        animation-timing-function: cubic-bezier(0.4, 0, 1, 1);
        opacity: 1;
        stroke-dashoffset: 0;
    }
    to{
        opacity: 0;
        stroke-dashoffset: -29.78334;
    }
}
@-webkit-keyframes mdc-checkbox-checked-indeterminate-checkmark{
    from{
        -webkit-transform: rotate(0deg);
        transform: rotate(0deg);
        opacity: 1;
        -webkit-animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
        animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
    }
    to{
        -webkit-transform: rotate(45deg);
        transform: rotate(45deg);
        opacity: 0;
    }
}
@keyframes mdc-checkbox-checked-indeterminate-checkmark{
    from{
        -webkit-transform: rotate(0deg);
        transform: rotate(0deg);
        opacity: 1;
        -webkit-animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
        animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
    }
    to{
        -webkit-transform: rotate(45deg);
        transform: rotate(45deg);
        opacity: 0;
    }
}
@-webkit-keyframes mdc-checkbox-indeterminate-checked-checkmark{
    from{
        -webkit-transform: rotate(45deg);
        transform: rotate(45deg);
        opacity: 0;
        -webkit-animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
        animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
    }
    to{
        -webkit-transform: rotate(360deg);
        transform: rotate(360deg);
        opacity: 1;
    }
}
@keyframes mdc-checkbox-indeterminate-checked-checkmark{
    from{
        -webkit-transform: rotate(45deg);
        transform: rotate(45deg);
        opacity: 0;
        -webkit-animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
        animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
    }
    to{
        -webkit-transform: rotate(360deg);
        transform: rotate(360deg);
        opacity: 1;
    }
}
@-webkit-keyframes mdc-checkbox-checked-indeterminate-mixedmark{
    from{
        -webkit-transform: rotate(-45deg);
        transform: rotate(-45deg);
        opacity: 0;
        -webkit-animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
        animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
    }
    to{
        -webkit-transform: rotate(0deg);
        transform: rotate(0deg);
        opacity: 1;
    }
}
@keyframes mdc-checkbox-checked-indeterminate-mixedmark{
    from{
        -webkit-transform: rotate(-45deg);
        transform: rotate(-45deg);
        opacity: 0;
        -webkit-animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
        animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
    }
    to{
        -webkit-transform: rotate(0deg);
        transform: rotate(0deg);
        opacity: 1;
    }
}
@-webkit-keyframes mdc-checkbox-indeterminate-checked-mixedmark{
    from{
        -webkit-transform: rotate(0deg);
        transform: rotate(0deg);
        opacity: 1;
        -webkit-animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
        animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
    }
    to{
        -webkit-transform: rotate(315deg);
        transform: rotate(315deg);
        opacity: 0;
    }
}
@keyframes mdc-checkbox-indeterminate-checked-mixedmark{
    from{
        -webkit-transform: rotate(0deg);
        transform: rotate(0deg);
        opacity: 1;
        -webkit-animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
        animation-timing-function: cubic-bezier(0.14, 0, 0, 1);
    }
    to{
        -webkit-transform: rotate(315deg);
        transform: rotate(315deg);
        opacity: 0;
    }
}
@-webkit-keyframes mdc-checkbox-indeterminate-unchecked-mixedmark{
    0%{
        -webkit-transform: scaleX(1);
        transform: scaleX(1);
        opacity: 1;
        -webkit-animation-timing-function: linear;
        animation-timing-function: linear;
    }
    32.8%, 100%{
        -webkit-transform: scaleX(0);
        transform: scaleX(0);
        opacity: 0;
    }
}
@keyframes mdc-checkbox-indeterminate-unchecked-mixedmark{
    0%{
        -webkit-transform: scaleX(1);
        transform: scaleX(1);
        opacity: 1;
        -webkit-animation-timing-function: linear;
        animation-timing-function: linear;
    }
    32.8%, 100%{
        -webkit-transform: scaleX(0);
        transform: scaleX(0);
        opacity: 0;
    }
}
.mdc-checkbox{
    --mdc-ripple-surface-width: 0;
    --mdc-ripple-surface-height: 0;
    --mdc-ripple-fg-size: 0;
    --mdc-ripple-left: 0;
    --mdc-ripple-top: 0;
    --mdc-ripple-fg-scale: 1;
    --mdc-ripple-fg-translate-end: 0;
    --mdc-ripple-fg-translate-start: 0;
    will-change: transform, opacity;
    -webkit-tap-highlight-color: transparent;
    display: inline-block;
    position: relative;
    box-sizing: content-box;
    -webkit-box-flex: 0;
    -ms-flex: 0 0 18px;
    flex: 0 0 18px;
    width: 18px;
    height: 18px;
    padding: 11px;
    line-height: 0;
    white-space: nowrap;
    cursor: pointer;
    vertical-align: bottom;
}
.mdc-checkbox:not(.mdc-ripple-upgraded):hover::before, .mdc-checkbox:not(.mdc-ripple-upgraded):focus::before, .mdc-checkbox:not(.mdc-ripple-upgraded):active::after{
    transition-duration: 85ms;
    opacity: .6;
}
.mdc-checkbox::before{
    background-color: rgba(63, 81, 181, .14);
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    transition: opacity 250ms linear;
    border-radius: 50%;
    opacity: 0;
    pointer-events: none;
    content: "";
}
@supports (background-color: color(green a(10%))){
    .mdc-checkbox::before{
        background-color: rgba(63, 81, 181, .14);
    }
}
.mdc-checkbox.mdc-ripple-upgraded::before{
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    -webkit-transform: scale(0);
    transform: scale(0);
    -webkit-transform: scale(0);
    transform: scale(0);
}
.mdc-checkbox.mdc-ripple-upgraded--background-focused::before{
    opacity: .99999;
}
.mdc-checkbox.mdc-ripple-upgraded--background-active-fill::before{
    transition-duration: 120ms;
    opacity: 1;
}
.mdc-checkbox.mdc-ripple-upgraded--unbounded::before{
    top: 0%;
    top: 0%;
    left: 0%;
    left: 0%;
    width: 100%;
    width: 100%;
    height: 100%;
    height: 100%;
    -webkit-transform: scale(0);
    transform: scale(0);
    -webkit-transform: scale(0);
    transform: scale(0);
}
.mdc-checkbox::after{
    background-color: rgba(63, 81, 181, .14);
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    transition: opacity 250ms linear;
    border-radius: 50%;
    opacity: 0;
    pointer-events: none;
    content: "";
}
@supports (background-color: color(green a(10%))){
    .mdc-checkbox::after{
        background-color: rgba(63, 81, 181, .14);
    }
}
.mdc-checkbox.mdc-ripple-upgraded::after{
    top: 0;
    left: 0;
    width: 100%;
    width: 100%;
    height: 100%;
    height: 100%;
    -webkit-transform: scale(0);
    transform: scale(0);
    -webkit-transform-origin: center center;
    transform-origin: center center;
    opacity: 0;
}
.mdc-checkbox:not(.mdc-ripple-upgraded--unbounded)::after{
    -webkit-transform-origin: center center;
    transform-origin: center center;
}
.mdc-checkbox.mdc-ripple-upgraded--unbounded::after{
    top: 0;
    top: 0;
    left: 0;
    left: 0;
    width: 100%;
    width: 100%;
    height: 100%;
    height: 100%;
    -webkit-transform: scale(0);
    transform: scale(0);
    -webkit-transform-origin: center center;
    transform-origin: center center;
}
.mdc-checkbox.mdc-ripple-upgraded--foreground-activation::after{
    -webkit-animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards;
    animation: 300ms mdc-ripple-fg-radius-in forwards, 83ms mdc-ripple-fg-opacity-in forwards;
}
.mdc-checkbox.mdc-ripple-upgraded--foreground-deactivation::after{
    -webkit-transform: translate(0) scale(1);
    transform: translate(0) scale(1);
    -webkit-animation: 250ms mdc-ripple-fg-opacity-out;
    animation: 250ms mdc-ripple-fg-opacity-out;
}
.mdc-checkbox::before, .mdc-checkbox::after{
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}
.mdc-checkbox.mdc-ripple-upgraded--unbounded .mdc-checkbox__background::before{
    content: none;
}
.mdc-checkbox__background{
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    left: 11px;
    right: initial;
    display: -webkit-inline-box;
    display: -ms-inline-flexbox;
    display: inline-flex;
    top: 11px;
    -webkit-box-align: center;
    -ms-flex-align: center;
    align-items: center;
    -webkit-box-pack: center;
    -ms-flex-pack: center;
    justify-content: center;
    box-sizing: border-box;
    pointer-events: none;
    width: 45%;
    height: 45%;
    transition: background-color 90ms 0ms cubic-bezier(0.4, 0, 1, 1), border-color 90ms 0ms cubic-bezier(0.4, 0, 1, 1);
    border: 2px solid rgba(0, 0, 0, .54);
    border-radius: 2px;
    background-color: transparent;
    will-change: background-color, border-color;
}
[dir="rtl"] .mdc-checkbox .mdc-checkbox__background, .mdc-checkbox[dir="rtl"] .mdc-checkbox__background{
    left: auto;
    left: initial;
    right: 11px;
}
.mdc-checkbox--theme-dark .mdc-checkbox__background, .mdc-theme--dark .mdc-checkbox__background{
    border-color: white;
}
.mdc-checkbox__background::before{
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 100%;
    -webkit-transform: scale(0, 0);
    transform: scale(0, 0);
    transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 1, 1), -webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 1, 1);
    transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 1, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 1, 1);
    transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 1, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 1, 1), -webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 1, 1);
    border-radius: 50%;
    content: "";
    opacity: 0;
    pointer-events: none;
    will-change: opacity, transform;
    background: #3f51b5;
    background: #3f51b5;
}
.mdc-checkbox__native-control{
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    margin: 0;
    padding: 0;
    cursor: inherit;
    opacity: 0;
}
.mdc-checkbox__checkmark{
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    width: 100%;
    transition: opacity 180ms 0ms cubic-bezier(0.4, 0, 1, 1);
    opacity: 0;
    fill: white;
}
.mdc-checkbox__checkmark__path{
    transition: stroke-dashoffset 180ms 0ms cubic-bezier(0.4, 0, 1, 1);
    stroke: white !important;
    stroke-width: 3.12px;
    stroke-dashoffset: 29.78334;
    stroke-dasharray: 29.78334;
}
.mdc-checkbox__mixedmark{
    width: 100%;
    height: 2px;
    -webkit-transform: scaleX(0) rotate(0deg);
    transform: scaleX(0) rotate(0deg);
    transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 1, 1), -webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 1, 1);
    transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 1, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 1, 1);
    transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 1, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 1, 1), -webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 1, 1);
    background-color: white;
    opacity: 0;
}
.mdc-checkbox__native-control:focus ~ .mdc-checkbox__background::before{
    -webkit-transform: scale(2.75, 2.75);
    transform: scale(2.75, 2.75);
    transition: opacity 80ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 80ms 0ms cubic-bezier(0, 0, 0.2, 1);
    transition: opacity 80ms 0ms cubic-bezier(0, 0, 0.2, 1), transform 80ms 0ms cubic-bezier(0, 0, 0.2, 1);
    transition: opacity 80ms 0ms cubic-bezier(0, 0, 0.2, 1), transform 80ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 80ms 0ms cubic-bezier(0, 0, 0.2, 1);
    opacity: .26;
}
.mdc-checkbox__native-control:checked ~ .mdc-checkbox__background{
    transition: border-color 90ms 0ms cubic-bezier(0, 0, 0.2, 1), background-color 90ms 0ms cubic-bezier(0, 0, 0.2, 1);
    border-color: #3f51b5;
    border-color: #3f51b5;
    background-color: #3f51b5;
    background-color: #3f51b5;
}
.mdc-checkbox__native-control:checked ~ .mdc-checkbox__background .mdc-checkbox__checkmark{
    transition: opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 180ms 0ms cubic-bezier(0, 0, 0.2, 1);
    transition: opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1), transform 180ms 0ms cubic-bezier(0, 0, 0.2, 1);
    transition: opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1), transform 180ms 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 180ms 0ms cubic-bezier(0, 0, 0.2, 1);
    opacity: 1;
}
.mdc-checkbox__native-control:checked ~ .mdc-checkbox__background .mdc-checkbox__checkmark__path{
    stroke-dashoffset: 0;
}
.mdc-checkbox__native-control:checked ~ .mdc-checkbox__background .mdc-checkbox__mixedmark{
    -webkit-transform: scaleX(1) rotate(-45deg);
    transform: scaleX(1) rotate(-45deg);
}
.mdc-checkbox__native-control:indeterminate ~ .mdc-checkbox__background{
    border-color: #3f51b5;
    border-color: #3f51b5;
    background-color: #3f51b5;
    background-color: #3f51b5;
}
.mdc-checkbox__native-control:indeterminate ~ .mdc-checkbox__background .mdc-checkbox__checkmark{
    -webkit-transform: rotate(45deg);
    transform: rotate(45deg);
    transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 1, 1), -webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 1, 1);
    transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 1, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 1, 1);
    transition: opacity 90ms 0ms cubic-bezier(0.4, 0, 1, 1), transform 90ms 0ms cubic-bezier(0.4, 0, 1, 1), -webkit-transform 90ms 0ms cubic-bezier(0.4, 0, 1, 1);
    opacity: 0;
}
.mdc-checkbox__native-control:indeterminate ~ .mdc-checkbox__background .mdc-checkbox__checkmark__path{
    stroke-dashoffset: 0;
}
.mdc-checkbox__native-control:indeterminate ~ .mdc-checkbox__background .mdc-checkbox__mixedmark{
    -webkit-transform: scaleX(1) rotate(0deg);
    transform: scaleX(1) rotate(0deg);
    opacity: 1;
}
.mdc-checkbox__native-control:disabled, fieldset:disabled .mdc-checkbox__native-control, [aria-disabled="true"] .mdc-checkbox__native-control{
    cursor: default;
}
.mdc-checkbox__native-control:disabled ~ .mdc-checkbox__background, fieldset:disabled .mdc-checkbox__native-control ~ .mdc-checkbox__background, [aria-disabled="true"] .mdc-checkbox__native-control ~ .mdc-checkbox__background{
    border-color: rgba(0, 0, 0, .26);
}
.mdc-checkbox--theme-dark .mdc-checkbox__native-control:disabled ~ .mdc-checkbox__background, .mdc-theme--dark .mdc-checkbox__native-control:disabled ~ .mdc-checkbox__background, .mdc-checkbox--theme-dark
    fieldset:disabled .mdc-checkbox__native-control ~ .mdc-checkbox__background, .mdc-theme--dark
    fieldset:disabled .mdc-checkbox__native-control ~ .mdc-checkbox__background, .mdc-checkbox--theme-dark
    [aria-disabled="true"] .mdc-checkbox__native-control ~ .mdc-checkbox__background, .mdc-theme--dark
    [aria-disabled="true"] .mdc-checkbox__native-control ~ .mdc-checkbox__background{
    border-color: rgba(255, 255, 255, .3);
}
.mdc-checkbox__native-control:disabled:checked ~ .mdc-checkbox__background, .mdc-checkbox__native-control:disabled:indeterminate ~ .mdc-checkbox__background, fieldset:disabled .mdc-checkbox__native-control:checked ~ .mdc-checkbox__background, fieldset:disabled .mdc-checkbox__native-control:indeterminate ~ .mdc-checkbox__background, [aria-disabled="true"] .mdc-checkbox__native-control:checked ~ .mdc-checkbox__background, [aria-disabled="true"] .mdc-checkbox__native-control:indeterminate ~ .mdc-checkbox__background{
    border-color: transparent;
    background-color: rgba(0, 0, 0, .26);
}
.mdc-checkbox--theme-dark .mdc-checkbox__native-control:disabled:checked ~ .mdc-checkbox__background, .mdc-theme--dark .mdc-checkbox__native-control:disabled:checked ~ .mdc-checkbox__background, .mdc-checkbox--theme-dark .mdc-checkbox__native-control:disabled:indeterminate ~ .mdc-checkbox__background, .mdc-theme--dark .mdc-checkbox__native-control:disabled:indeterminate ~ .mdc-checkbox__background, .mdc-checkbox--theme-dark
    fieldset:disabled .mdc-checkbox__native-control:checked ~ .mdc-checkbox__background, .mdc-theme--dark
    fieldset:disabled .mdc-checkbox__native-control:checked ~ .mdc-checkbox__background, .mdc-checkbox--theme-dark
    fieldset:disabled .mdc-checkbox__native-control:indeterminate ~ .mdc-checkbox__background, .mdc-theme--dark
    fieldset:disabled .mdc-checkbox__native-control:indeterminate ~ .mdc-checkbox__background, .mdc-checkbox--theme-dark
    [aria-disabled="true"] .mdc-checkbox__native-control:checked ~ .mdc-checkbox__background, .mdc-theme--dark
    [aria-disabled="true"] .mdc-checkbox__native-control:checked ~ .mdc-checkbox__background, .mdc-checkbox--theme-dark
    [aria-disabled="true"] .mdc-checkbox__native-control:indeterminate ~ .mdc-checkbox__background, .mdc-theme--dark
    [aria-disabled="true"] .mdc-checkbox__native-control:indeterminate ~ .mdc-checkbox__background{
    background-color: rgba(255, 255, 255, .3);
}
.mdc-checkbox--disabled{
    cursor: default;
    pointer-events: none;
}
.mdc-checkbox--upgraded .mdc-checkbox__background, .mdc-checkbox--upgraded .mdc-checkbox__checkmark, .mdc-checkbox--upgraded .mdc-checkbox__checkmark__path, .mdc-checkbox--upgraded .mdc-checkbox__mixedmark{
    transition: none !important;
}
.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__background, .mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__background{
    -webkit-animation: mdc-checkbox-fade-in-background 180ms linear;
    animation: mdc-checkbox-fade-in-background 180ms linear;
}
.mdc-checkbox--theme-dark .mdc-checkbox--anim-unchecked-checked .mdc-checkbox__background, .mdc-theme--dark .mdc-checkbox--anim-unchecked-checked .mdc-checkbox__background, .mdc-checkbox--theme-dark .mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__background, .mdc-theme--dark .mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__background{
    -webkit-animation-name: mdc-checkbox-fade-in-background-dark;
    animation-name: mdc-checkbox-fade-in-background-dark;
}
.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__background, .mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__background{
    -webkit-animation: mdc-checkbox-fade-out-background 180ms linear;
    animation: mdc-checkbox-fade-out-background 180ms linear;
}
.mdc-checkbox--theme-dark .mdc-checkbox--anim-checked-unchecked .mdc-checkbox__background, .mdc-theme--dark .mdc-checkbox--anim-checked-unchecked .mdc-checkbox__background, .mdc-checkbox--theme-dark .mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__background, .mdc-theme--dark .mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__background{
    -webkit-animation-name: mdc-checkbox-fade-out-background-dark;
    animation-name: mdc-checkbox-fade-out-background-dark;
}
.mdc-checkbox--anim-unchecked-checked .mdc-checkbox__checkmark__path{
    -webkit-animation: 180ms linear 0s mdc-checkbox-unchecked-checked-checkmark-path;
    animation: 180ms linear 0s mdc-checkbox-unchecked-checked-checkmark-path;
    transition: none;
}
.mdc-checkbox--anim-unchecked-indeterminate .mdc-checkbox__mixedmark{
    -webkit-animation: 90ms linear 0s mdc-checkbox-unchecked-indeterminate-mixedmark;
    animation: 90ms linear 0s mdc-checkbox-unchecked-indeterminate-mixedmark;
    transition: none;
}
.mdc-checkbox--anim-checked-unchecked .mdc-checkbox__checkmark__path{
    -webkit-animation: 90ms linear 0s mdc-checkbox-checked-unchecked-checkmark-path;
    animation: 90ms linear 0s mdc-checkbox-checked-unchecked-checkmark-path;
    transition: none;
}
.mdc-checkbox--anim-checked-indeterminate .mdc-checkbox__checkmark{
    -webkit-animation: 90ms linear 0s mdc-checkbox-checked-indeterminate-checkmark;
    animation: 90ms linear 0s mdc-checkbox-checked-indeterminate-checkmark;
    transition: none;
}
.mdc-checkbox--anim-checked-indeterminate .mdc-checkbox__mixedmark{
    -webkit-animation: 90ms linear 0s mdc-checkbox-checked-indeterminate-mixedmark;
    animation: 90ms linear 0s mdc-checkbox-checked-indeterminate-mixedmark;
    transition: none;
}
.mdc-checkbox--anim-indeterminate-checked .mdc-checkbox__checkmark{
    -webkit-animation: 500ms linear 0s mdc-checkbox-indeterminate-checked-checkmark;
    animation: 500ms linear 0s mdc-checkbox-indeterminate-checked-checkmark;
    transition: none;
}
.mdc-checkbox--anim-indeterminate-checked .mdc-checkbox__mixedmark{
    -webkit-animation: 500ms linear 0s mdc-checkbox-indeterminate-checked-mixedmark;
    animation: 500ms linear 0s mdc-checkbox-indeterminate-checked-mixedmark;
    transition: none;
}
.mdc-checkbox--anim-indeterminate-unchecked .mdc-checkbox__mixedmark{
    -webkit-animation: 300ms linear 0s mdc-checkbox-indeterminate-unchecked-mixedmark;
    animation: 300ms linear 0s mdc-checkbox-indeterminate-unchecked-mixedmark;
    transition: none;
}
/*!
 Material Components for the web
 Copyright (c) 2017 Google Inc.
 License: Apache-2.0
*/
/**
 * Creates a rule that will be applied when an MDC-Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box-property(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/*
  Precomputed linear color channel values, for use in contrast calculations.
  See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests

  Algorithm, for c in 0 to 255:
  f(c) {
    c = c / 255;
    return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
  }

  This lookup table is needed since there is no `pow` in SASS.
*/
/**
 * Calculate the luminance for a color.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Calculate the contrast ratio between two colors.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Determine whether to use dark or light text on top of given color.
 * Returns "dark" for dark text and "light" for light text.
 */
/*
  Main theme colors.
  If you're a user customizing your color scheme in SASS, these are probably the only variables you need to change.
*/
/* Indigo 500 */
/* Pink A200 */
/* White */
/* Which set of text colors to use for each main theme color (light or dark) */
/* Text colors according to light vs dark and text type */
/* Primary text colors for each of the theme colors */
/**
 * Applies the correct theme color style to the specified property.
 * $property is typically color or background-color, but can be any CSS property that accepts color values.
 * $style should be one of the map keys in $mdc-theme-property-values (_variables.scss).
 */
/**
 * Creates a rule to be used in MDC-Web components for dark theming, and applies the provided contents.
 * Should provide the $root-selector option if applied to anything other than the root selector.
 * When used with a modifier class, provide a second argument of `true` for the $compound parameter
 * to specify that this should be attached as a compound class.
 *
 * Usage example:
 *
 * ```scss
 * .mdc-foo {
 *   color: black;
 *
 *   @include mdc-theme-dark {
 *     color: white;
 *   }
 *
 *   &__bar {
 *     background: black;
 *
 *     @include mdc-theme-dark(".mdc-foo") {
 *       background: white;
 *     }
 *   }
 * }
 *
 * .mdc-foo--disabled {
 *   opacity: .38;
 *
 *   @include mdc-theme-dark(".mdc-foo", true) {
 *     opacity: .5;
 *   }
 * }
 * ```
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
.mdc-grid-list .mdc-grid-tile__primary{
    padding-bottom: 100%;
}
.mdc-grid-list .mdc-grid-tile{
    margin: 2px 0;
    padding: 0 2px;
}
.mdc-grid-list .mdc-grid-tile__secondary{
    left: 2px;
    width: calc(100% - 4px);
}
.mdc-grid-list .mdc-grid-list__tiles{
    margin: 2px auto;
}
.mdc-grid-list__tiles{
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    -ms-flex-direction: row;
    flex-direction: row;
    -ms-flex-wrap: wrap;
    flex-wrap: wrap;
    margin: 0;
    padding: 0;
}
.mdc-grid-list--tile-gutter-1 .mdc-grid-tile{
    margin: 0.5px 0;
    padding: 0 0.5px;
}
.mdc-grid-list--tile-gutter-1 .mdc-grid-tile__secondary{
    left: 0.5px;
    width: calc(100% - 1px);
}
.mdc-grid-list--tile-gutter-1 .mdc-grid-list__tiles{
    margin: 0.5px auto;
}
.mdc-grid-list--tile-aspect-16x9 .mdc-grid-tile__primary{
    padding-bottom: 56.24993%;
}
.mdc-grid-list--tile-aspect-3x2 .mdc-grid-tile__primary{
    padding-bottom: 66.66667%;
}
.mdc-grid-list--tile-aspect-2x3 .mdc-grid-tile__primary{
    padding-bottom: 149.99925%;
}
.mdc-grid-list--tile-aspect-4x3 .mdc-grid-tile__primary{
    padding-bottom: 75.00019%;
}
.mdc-grid-list--tile-aspect-3x4 .mdc-grid-tile__primary{
    padding-bottom: 133.33333%;
}
.mdc-grid-list--twoline-caption .mdc-grid-tile__secondary{
    height: 68px;
}
.mdc-grid-list--header-caption .mdc-grid-tile__secondary{
    top: 0;
    bottom: auto;
}
.mdc-grid-list--with-icon-align-start .mdc-grid-tile__secondary{
    padding-left: 56px;
    padding-right: 8px;
}
[dir="rtl"] .mdc-grid-list .mdc-grid-list--with-icon-align-start .mdc-grid-tile__secondary, .mdc-grid-list[dir="rtl"] .mdc-grid-list--with-icon-align-start .mdc-grid-tile__secondary{
    padding-left: 8px;
    padding-right: 56px;
}
.mdc-grid-list--with-icon-align-start .mdc-grid-tile__icon{
    left: 16px;
    right: auto;
    right: initial;
    font-size: 24px;
}
[dir="rtl"] .mdc-grid-list .mdc-grid-list--with-icon-align-start .mdc-grid-tile__icon, .mdc-grid-list[dir="rtl"] .mdc-grid-list--with-icon-align-start .mdc-grid-tile__icon{
    left: auto;
    left: initial;
    right: 16px;
}
.mdc-grid-list--with-icon-align-end .mdc-grid-tile__secondary{
    padding-left: 16px;
    padding-right: 56px;
}
[dir="rtl"] .mdc-grid-list .mdc-grid-list--with-icon-align-end .mdc-grid-tile__secondary, .mdc-grid-list[dir="rtl"] .mdc-grid-list--with-icon-align-end .mdc-grid-tile__secondary{
    padding-left: 56px;
    padding-right: 16px;
}
.mdc-grid-list--with-icon-align-end .mdc-grid-tile__icon{
    left: auto;
    left: initial;
    right: 16px;
    font-size: 24px;
}
[dir="rtl"] .mdc-grid-list .mdc-grid-list--with-icon-align-end .mdc-grid-tile__icon, .mdc-grid-list[dir="rtl"] .mdc-grid-list--with-icon-align-end .mdc-grid-tile__icon{
    left: 16px;
    right: auto;
    right: initial;
}
.mdc-grid-tile{
    display: block;
    position: relative;
    width: 200px;
}
.mdc-grid-tile__primary{
    position: relative;
    height: 0;
    background-color: #fff;
    background-color: #fff;
    color: rgba(0, 0, 0, .87);
    color: rgba(0, 0, 0, .87);
}
.mdc-grid-tile__primary-content{
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-repeat: no-repeat;
    background-position: center;
    background-size: cover;
}
.mdc-grid-tile__secondary{
    position: absolute;
    box-sizing: border-box;
    bottom: 0;
    height: 48px;
    padding: 16px;
    background-color: #3f51b5;
    background-color: #3f51b5;
    color: white;
    color: white;
}
.mdc-grid-tile__title{
    display: block;
    margin: 0;
    padding: 0;
    font-size: 1rem;
    font-weight: 500;
    line-height: 1rem;
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
}
.mdc-grid-tile__support-text{
    font-family: Roboto, sans-serif;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-size: 0.875rem;
    font-weight: 400;
    letter-spacing: 0.04em;
    line-height: 1.25rem;
    display: block;
    margin: 0;
    margin-top: 4px;
    padding: 0;
}
.mdc-grid-tile__icon{
    position: absolute;
    top: calc(50% - 24px / 2);
    font-size: 0;
}
body {
    font-family: 'Roboto', sans-serif;
}
.edit {
    display: none;
    padding: 8px 0;
    padding-left: 10px;
}
.editing .description {
    display: none;
}
.editing .edit {
    display: inline-block;
}
.searchArea {
    width: 100%;
    padding: 20px 10px;
    text-align: center;
}
.mdc-grid-list .mdc-grid-tile {
    margin: 10px;
}
.completed section.mdc-grid-tile__primary {
    background: gray !important;
    color: gray !important;
}
.completed section.mdc-grid-tile__secondary {
    background: #545353 !important;
    color: #545353 !important;
}
.mdc-grid-tile__secondary {
    height: 35% !important;
    background-color: #e44c4c !important;
}
.mdc-checkbox {
    background: #fff;
    padding: 0;
    margin: 9px;
    border: 2px solid #828282;
    border-radius: 50%;
    transition: 300ms ease-in-out;
}
.completed .mdc-checkbox {
    background: rgb(177, 170, 170);
}
.completed .mdc-button::before {
    background-color: rgba(0, 0, 0, .6);
}
.mdc-button::before {
    background-color: rgba(255, 255, 255, .3);
}
.mdc-card__title {
    text-align: center;
    font-size: 20px;
    font-weight: 300;
    margin-bottom: 10px;
}
.mdc-card__supporting-text {
    background: rgba(228, 76, 76, .5);
}
.completed .todoDescription.mdc-card__supporting-text {
    background: none;
}
.add-todo {
    padding: 30px 50px;
    background-color: rgba(236, 235, 235, .4);
    color: #e44c4c;
    font-size: 30px;
    box-shadow: 2px 2px 5px rgba(214, 207, 207, .35);
}
.mdc-textfield:not(.mdc-textfield--upgraded) .mdc-textfield__input:focus {
    border-color: #e44c4c;
}
.mdc-checkbox label {
    display: block;
    margin-top: 28px;
    font-size: 12px;
}
button.mdc-grid-tile__secondary-content.mdc-button {
    float: right;
    margin-top: 5px;
}
.completed .mdc-checkbox label {
    color: #9e9e9e;
}.header {
  position: fixed;
  width: 100%;
  padding: 10px 0; }

a.logoHolder {
  background-color: #00ffff;
  width: 200px; }

.homeHolder {
  font-family: Helvetica, sans-serif; }
